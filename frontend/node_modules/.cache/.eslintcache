[{"/Users/ian/react/rush-hour/frontend/src/index.js":"1","/Users/ian/react/rush-hour/frontend/src/App.js":"2","/Users/ian/react/rush-hour/frontend/src/components/Game.js":"3","/Users/ian/react/rush-hour/frontend/src/components/Board.js":"4","/Users/ian/react/rush-hour/frontend/src/components/Controls.js":"5","/Users/ian/react/rush-hour/frontend/src/components/Piece.js":"6","/Users/ian/react/rush-hour/frontend/src/components/Timer.js":"7"},{"size":137,"mtime":1628186449592,"results":"8","hashOfConfig":"9"},{"size":229,"mtime":1628193579086,"results":"10","hashOfConfig":"9"},{"size":2522,"mtime":1630597167616,"results":"11","hashOfConfig":"9"},{"size":2216,"mtime":1630593767045,"results":"12","hashOfConfig":"9"},{"size":794,"mtime":1630596400775,"results":"13","hashOfConfig":"9"},{"size":5056,"mtime":1628778105310,"results":"14","hashOfConfig":"9"},{"size":91,"mtime":1628780018449,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9eflsb",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/ian/react/rush-hour/frontend/src/index.js",[],["34","35"],"/Users/ian/react/rush-hour/frontend/src/App.js",["36","37"],"import React, { useState } from 'react'\nimport Draggable from 'react-draggable'\n\nimport Game from './components/Game'\nimport './styling/App.css'\n\nfunction App() {\n\n    return (\n        <Game></Game>\n    );\n}\n\nexport default App;\n","/Users/ian/react/rush-hour/frontend/src/components/Game.js",["38","39"],"/Users/ian/react/rush-hour/frontend/src/components/Board.js",["40","41","42","43","44","45"],"import React, { useState, useEffect } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\nconst FALLBACK_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:2, h:1, w:2, orientation:'HORIZONTAL', color:'red', escapingPiece:true},\n        {id:1, x:2, y:0, h:3, w:1, orientation:'VERTICAL', color:'blue', escapingPiece:false},\n        {id:2, x:0, y:3, h:1, w:3, orientation:'HORIZONTAL', color:'green', escapingPiece:false},\n        {id:3, x:5, y:3, h:3, w:1, orientation:'VERTICAL', color:'teal', escapingPiece:false},\n    ]\n}\n\nconst getEscapeSpace = pieces => {\n    let escapePiece = pieces.filter(piece => piece.escapingPiece)\n    return escapePiece[0]\n}\n\nconst Board = props => {\n    const [isMounted, setIsMounted] = useState(false);\n    const [piecesOnBoard, setPiecesOnBoard] = useState(props.currPuzzle.pieces);\n    const escapeSpace = getEscapeSpace(props.currPuzzle.pieces);\n\n    useEffect(() => {\n        setPiecesOnBoard(props.currPuzzle.pieces);\n    },[props.currPuzzle.pieces])\n\n    const populateBoardFromPuzzle = puzzlePieces => {\n        return puzzlePieces.map(piece => (\n            <Piece \n                key={piece.id} \n                pieceProps={piece} \n                allPieces={puzzlePieces} \n                onFinishedDragging={updatePiecesOnBoard} \n            />)\n        )\n    }\n\n    const updatePiecesOnBoard = (id, newBin) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState.slice();\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (element.orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else if (element.orientation == 'VERTICAL') {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            return newState;\n        })\n\n        if (id == escapeSpace.id && newBin + escapeSpace.w > 5) {\n            alert('you win')\n        }\n    }\n    \n    useEffect(() => {setIsMounted(true)})\n\n    return (\n        <div id='main-board' className='board'>\n            {isMounted && populateBoardFromPuzzle(piecesOnBoard)}\n        </div>\n    )\n}\n\nexport default Board","/Users/ian/react/rush-hour/frontend/src/components/Controls.js",["46"],"/Users/ian/react/rush-hour/frontend/src/components/Piece.js",["47","48","49","50","51","52","53","54","55"],"import React, { useEffect, useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst AXIS = {\n    x: 'x',\n    y: 'y'\n}\n\nconst calculateBounds = (id, x, y, h, w, allPieces, axis) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n    let tileSize = boardBoundingRect.width / BOARD_SIZE;\n\n    let left = parseInt(0 - (x * tileSize));\n    let top = parseInt(0 - (y * tileSize));\n    let right = parseInt(boardBoundingRect.width - ((w + x) * tileSize));\n    let bottom = parseInt(boardBoundingRect.height - ((h + y) * tileSize));\n    \n    allPieces.forEach(otherPiece => {\n        if (id != otherPiece.id) {\n            if (axis == AXIS.x) {\n                if (x >= otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    left = parseInt(0 - ((x - (otherPiece.x + otherPiece.w)) * tileSize))\n                } else if (x < otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    right = parseInt((otherPiece.x * tileSize) - ((x + w) * tileSize))\n                }\n            } else if (axis == AXIS.y) {\n                if (y >= otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    top = parseInt(0 - ((y - (otherPiece.y + otherPiece.h)) * tileSize))\n                } else if (y < otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    bottom = parseInt((otherPiece.y * tileSize) - ((y + h) * tileSize))\n                }\n            }\n        }\n    })\n\n    return {\n        left: left, \n        top: top, \n        right: right, \n        bottom: bottom\n    }\n}\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    let bounds = calculateBounds(id, x, y, h, w, allPieces, axis)\n\n    return (\n        <Draggable axis={axis} bounds={bounds} onStop={coordHandler} position={{x:0, y:0}}>\n            <div id={id} style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const passNewBinToParent = () => {\n        let currElement = document.getElementById(props.pieceProps.id)\n\n        let boardPx = document.getElementById('main-board').getBoundingClientRect().width\n        let vals = currElement.style.transform.match(/-?[0-9]+/gm)\n        let tileSize = boardPx / BOARD_SIZE;\n\n        if (vals.length == 1 && vals[0] != \"0\") {\n            // Only has transform in X direction\n            let xTransform = Number(vals[0])\n            let newOffset = currElement.offsetLeft + xTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n\n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        } else if (vals.length == 2) {\n            // Has transforms for both X and Y directions -- X will be 0\n            let yTransform = Number(vals[1])\n            let newOffset = currElement.offsetTop + yTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n            \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        }\n    }\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent)\n        : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent);\n\n    return currPiece;\n}\n\nexport default Piece;","/Users/ian/react/rush-hour/frontend/src/components/Timer.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":17},{"ruleId":"60","severity":1,"message":"65","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":41,"column":9,"nodeType":"68","messageId":"69","endLine":58,"endColumn":10},{"ruleId":"60","severity":1,"message":"70","line":5,"column":7,"nodeType":"62","messageId":"63","endLine":5,"endColumn":17},{"ruleId":"60","severity":1,"message":"71","line":7,"column":7,"nodeType":"62","messageId":"63","endLine":7,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":47,"column":45,"nodeType":"74","messageId":"75","endLine":47,"endColumn":47},{"ruleId":"72","severity":1,"message":"73","line":49,"column":52,"nodeType":"74","messageId":"75","endLine":49,"endColumn":54},{"ruleId":"72","severity":1,"message":"73","line":58,"column":16,"nodeType":"74","messageId":"75","endLine":58,"endColumn":18},{"ruleId":"76","severity":1,"message":"77","line":63,"column":5,"nodeType":"62","endLine":63,"endColumn":14,"suggestions":"78"},{"ruleId":"60","severity":1,"message":"79","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":13},{"ruleId":"60","severity":1,"message":"65","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":1,"column":28,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"80","line":22,"column":16,"nodeType":"74","messageId":"75","endLine":22,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":23,"column":22,"nodeType":"74","messageId":"75","endLine":23,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":29,"column":29,"nodeType":"74","messageId":"75","endLine":29,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":77,"column":25,"nodeType":"74","messageId":"75","endLine":77,"endColumn":27},{"ruleId":"72","severity":1,"message":"80","line":77,"column":41,"nodeType":"74","messageId":"75","endLine":77,"endColumn":43},{"ruleId":"72","severity":1,"message":"73","line":98,"column":32,"nodeType":"74","messageId":"75","endLine":98,"endColumn":34},{"ruleId":"72","severity":1,"message":"73","line":122,"column":50,"nodeType":"74","messageId":"75","endLine":122,"endColumn":52},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Draggable' is defined but never used.","'useEffect' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'BOARD_SIZE' is assigned a value but never used.","'FALLBACK_PUZZLE' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsMounted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["83"],"'Timer' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Add dependencies array: []",{"range":"86","text":"87"},[2042,2042],", []"]