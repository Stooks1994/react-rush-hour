{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Piece from \"./Piece\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\n/*\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:2, h:1, w:2, orientation:'HORIZONTAL', color:'red', escapingPiece:true},\n        {id:1, x:2, y:0, h:3, w:1, orientation:'VERTICAL', color:'blue', escapingPiece:false},\n        {id:2, x:0, y:3, h:1, w:3, orientation:'HORIZONTAL', color:'green', escapingPiece:false},\n        {id:3, x:5, y:3, h:3, w:1, orientation:'VERTICAL', color:'teal', escapingPiece:false},\n    ]\n}\n*/\n\nconst getEscapeSpace = pieces => {\n  let escapePiece = pieces.filter(piece => piece.escapingPiece);\n  return escapePiece[0];\n};\n\nconst Board = props => {\n  _s();\n\n  const [isMounted, setIsMounted] = useState(false);\n  const [piecesOnBoard, setPiecesOnBoard] = useState(props.currPuzzle.pieces);\n  const escapeSpace = getEscapeSpace(props.currPuzzle.pieces);\n\n  const populateBoardFromPuzzle = puzzlePieces => {\n    return puzzlePieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      allPieces: puzzlePieces,\n      onFinishedDragging: updatePiecesOnBoard\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this));\n  };\n\n  const updatePiecesOnBoard = (id, newBin) => {\n    setPiecesOnBoard(prevState => {\n      let newState = prevState.slice();\n      newState.forEach(element => {\n        if (element.id === id) {\n          if (element.orientation == 'HORIZONTAL') {\n            element.x = newBin;\n          } else if (element.orientation == 'VERTICAL') {\n            element.y = newBin;\n          }\n        }\n      });\n      return newState;\n    });\n\n    if (id == escapeSpace.id && newBin + escapeSpace.w > 5) {\n      alert('you win');\n    }\n  };\n\n  useEffect(() => {\n    setIsMounted(true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: isMounted && populateBoardFromPuzzle(piecesOnBoard)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"53/t4kmeBkTGOBizZr/SxMJpjnU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","useEffect","Piece","BOARD_SIZE","getEscapeSpace","pieces","escapePiece","filter","piece","escapingPiece","Board","props","isMounted","setIsMounted","piecesOnBoard","setPiecesOnBoard","currPuzzle","escapeSpace","populateBoardFromPuzzle","puzzlePieces","map","updatePiecesOnBoard","id","newBin","prevState","newState","slice","forEach","element","orientation","x","y","w","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGC,MAAM,IAAI;AAC7B,MAAIC,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,aAA7B,CAAlB;AACA,SAAOH,WAAW,CAAC,CAAD,CAAlB;AACH,CAHD;;AAKA,MAAMI,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAACW,KAAK,CAACK,UAAN,CAAiBX,MAAlB,CAAlD;AACA,QAAMY,WAAW,GAAGb,cAAc,CAACO,KAAK,CAACK,UAAN,CAAiBX,MAAlB,CAAlC;;AAEA,QAAMa,uBAAuB,GAAGC,YAAY,IAAI;AAC5C,WAAOA,YAAY,CAACC,GAAb,CAAiBZ,KAAK,iBACzB,QAAC,KAAD;AAEI,MAAA,UAAU,EAAEA,KAFhB;AAGI,MAAA,SAAS,EAAEW,YAHf;AAII,MAAA,kBAAkB,EAAEE;AAJxB,OACSb,KAAK,CAACc,EADf;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAQH,GATD;;AAWA,QAAMD,mBAAmB,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB;AACxCR,IAAAA,gBAAgB,CAAES,SAAD,IAAe;AAC5B,UAAIC,QAAQ,GAAGD,SAAS,CAACE,KAAV,EAAf;AAEAD,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,OAAO,IAAI;AACxB,YAAIA,OAAO,CAACN,EAAR,KAAeA,EAAnB,EAAuB;AACnB,cAAIM,OAAO,CAACC,WAAR,IAAuB,YAA3B,EAAyC;AACrCD,YAAAA,OAAO,CAACE,CAAR,GAAYP,MAAZ;AACH,WAFD,MAEO,IAAIK,OAAO,CAACC,WAAR,IAAuB,UAA3B,EAAuC;AAC1CD,YAAAA,OAAO,CAACG,CAAR,GAAYR,MAAZ;AACH;AACJ;AACJ,OARD;AAUA,aAAOE,QAAP;AACH,KAde,CAAhB;;AAgBA,QAAIH,EAAE,IAAIL,WAAW,CAACK,EAAlB,IAAwBC,MAAM,GAAGN,WAAW,CAACe,CAArB,GAAyB,CAArD,EAAwD;AACpDC,MAAAA,KAAK,CAAC,SAAD,CAAL;AACH;AACJ,GApBD;;AAsBAhC,EAAAA,SAAS,CAAC,MAAM;AAACY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAAmB,GAA3B,CAAT;AAEA,sBACI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAA,cACKD,SAAS,IAAIM,uBAAuB,CAACJ,aAAD;AADzC;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7CD;;GAAMJ,K;;KAAAA,K;AA+CN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\n/*\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:2, h:1, w:2, orientation:'HORIZONTAL', color:'red', escapingPiece:true},\n        {id:1, x:2, y:0, h:3, w:1, orientation:'VERTICAL', color:'blue', escapingPiece:false},\n        {id:2, x:0, y:3, h:1, w:3, orientation:'HORIZONTAL', color:'green', escapingPiece:false},\n        {id:3, x:5, y:3, h:3, w:1, orientation:'VERTICAL', color:'teal', escapingPiece:false},\n    ]\n}\n*/\n\nconst getEscapeSpace = pieces => {\n    let escapePiece = pieces.filter(piece => piece.escapingPiece)\n    return escapePiece[0]\n}\n\nconst Board = props => {\n    const [isMounted, setIsMounted] = useState(false);\n    const [piecesOnBoard, setPiecesOnBoard] = useState(props.currPuzzle.pieces);\n    const escapeSpace = getEscapeSpace(props.currPuzzle.pieces);\n\n    const populateBoardFromPuzzle = puzzlePieces => {\n        return puzzlePieces.map(piece => (\n            <Piece \n                key={piece.id} \n                pieceProps={piece} \n                allPieces={puzzlePieces} \n                onFinishedDragging={updatePiecesOnBoard} \n            />)\n        )\n    }\n\n    const updatePiecesOnBoard = (id, newBin) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState.slice();\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (element.orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else if (element.orientation == 'VERTICAL') {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            return newState;\n        })\n\n        if (id == escapeSpace.id && newBin + escapeSpace.w > 5) {\n            alert('you win')\n        }\n    }\n    \n    useEffect(() => {setIsMounted(true)})\n\n    return (\n        <div id='main-board' className='board'>\n            {isMounted && populateBoardFromPuzzle(piecesOnBoard)}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}