{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, h, w, axis, color) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  let height = h * SIZE_MOD;\n  let width = w * SIZE_MOD;\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: axis,\n    bounds: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: `${xPos}%`,\n        top: `${yPos}%`,\n        height: `${height}%`,\n        width: `${width}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n  let currPiece = props.pieceProps.orientation == 'HORIZONTAL' ? preparePiece(currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color) : preparePiece(currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color);\n  return currPiece;\n  /*\n  let x = currX * SIZE_MOD;\n  let y = currY * SIZE_MOD;\n  let color = props.pieceProps.color;\n   if (props.pieceProps.orientation == 'HORIZONTAL') {\n      let w = props.pieceProps.size * SIZE_MOD;\n      let h = 1 * SIZE_MOD;\n       return (\n          <Draggable axis='x' bounds='parent'>\n              <div style={{\n                  position:'absolute', \n                  left:`${x}%`, \n                  top:`${y}%`, \n                  height:`${h}%`, \n                  width:`${w}%`, \n                  backgroundColor:`${color}`,\n              }} />\n          </Draggable>\n      )\n  }\n   let h = Number(props.pieceProps.size * SIZE_MOD);\n  let w = Number(1 * SIZE_MOD);\n   return (\n      <Draggable axis='y' bounds='parent'>\n          <div style={{\n              position:'absolute', \n              left:`${x}%`, \n              top:`${y}%`, \n              height:`${h}%`, \n              width:`${w}%`, \n              backgroundColor:`${color}`,\n          }} />     \n      </Draggable>\n  )\n  */\n};\n\n_s(Piece, \"/A3MDO/EzisF3q3SKiJ9PBrtAyo=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useState","Draggable","BOARD_SIZE","SIZE_MOD","preparePiece","x","y","h","w","axis","color","xPos","yPos","height","width","position","left","top","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","currPiece","orientation","size"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,QAAQ,GAAG,MAAMD,UAAvB;;AAEA,MAAME,YAAY,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,IAAb,EAAmBC,KAAnB,KAA6B;AAC9C,MAAIC,IAAI,GAAGN,CAAC,GAAGF,QAAf;AACA,MAAIS,IAAI,GAAGN,CAAC,GAAGH,QAAf;AACA,MAAIU,MAAM,GAAGN,CAAC,GAAGJ,QAAjB;AACA,MAAIW,KAAK,GAAGN,CAAC,GAAGL,QAAhB;AAEA,sBACI,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEM,IAAjB;AAAuB,IAAA,MAAM,EAAC,QAA9B;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AACRM,QAAAA,QAAQ,EAAC,UADD;AAERC,QAAAA,IAAI,EAAE,GAAEL,IAAK,GAFL;AAGRM,QAAAA,GAAG,EAAE,GAAEL,IAAK,GAHJ;AAIRC,QAAAA,MAAM,EAAE,GAAEA,MAAO,GAJT;AAKRC,QAAAA,KAAK,EAAE,GAAEA,KAAM,GALP;AAMRI,QAAAA,eAAe,EAAE,GAAER,KAAM;AANjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAlBD;;AAoBA,MAAMS,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAACoB,KAAK,CAACG,UAAN,CAAiBlB,CAAlB,CAAlC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAACoB,KAAK,CAACG,UAAN,CAAiBjB,CAAlB,CAAlC;AAEA,MAAIoB,SAAS,GAAGN,KAAK,CAACG,UAAN,CAAiBI,WAAjB,IAAgC,YAAhC,GACVvB,YAAY,CAACiB,KAAD,EAAQG,KAAR,EAAe,CAAf,EAAkBJ,KAAK,CAACG,UAAN,CAAiBK,IAAnC,EAAyC,GAAzC,EAA8CR,KAAK,CAACG,UAAN,CAAiBb,KAA/D,CADF,GAEVN,YAAY,CAACiB,KAAD,EAAQG,KAAR,EAAeJ,KAAK,CAACG,UAAN,CAAiBK,IAAhC,EAAsC,CAAtC,EAAyC,GAAzC,EAA8CR,KAAK,CAACG,UAAN,CAAiBb,KAA/D,CAFlB;AAIA,SAAOgB,SAAP;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKC,CAhDD;;GAAMP,K;;KAAAA,K;AAkDN,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, h, w, axis, color) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    return (\n        <Draggable axis={axis} bounds='parent'>\n            <div style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color)\n        : preparePiece(currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color);\n\n    return currPiece;\n    /*\n    let x = currX * SIZE_MOD;\n    let y = currY * SIZE_MOD;\n    let color = props.pieceProps.color;\n\n    if (props.pieceProps.orientation == 'HORIZONTAL') {\n        let w = props.pieceProps.size * SIZE_MOD;\n        let h = 1 * SIZE_MOD;\n\n        return (\n            <Draggable axis='x' bounds='parent'>\n                <div style={{\n                    position:'absolute', \n                    left:`${x}%`, \n                    top:`${y}%`, \n                    height:`${h}%`, \n                    width:`${w}%`, \n                    backgroundColor:`${color}`,\n                }} />\n            </Draggable>\n        )\n    }\n\n    let h = Number(props.pieceProps.size * SIZE_MOD);\n    let w = Number(1 * SIZE_MOD);\n\n    return (\n        <Draggable axis='y' bounds='parent'>\n            <div style={{\n                position:'absolute', \n                left:`${x}%`, \n                top:`${y}%`, \n                height:`${h}%`, \n                width:`${w}%`, \n                backgroundColor:`${color}`,\n            }} />     \n        </Draggable>\n    )\n    */\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}