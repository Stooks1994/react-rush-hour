{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  const initializeBoard = (x, y) => {\n    let board = [];\n\n    for (let column = 0; column < x; column++) {\n      board.push([]);\n\n      for (let row = 0; row < y; row++) {\n        board[column].push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 36\n        }, this));\n      }\n    }\n\n    return board;\n  };\n\n  const [boardArray, setBoardArray] = useState(initializeBoard(props.boardSize.x, props.boardSize.y));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: boardArray.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 37\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n  /*\n  const initializeTiles = (x, y) => {\n      let tiles = [];\n       for (let i = 0; i < x; i++) {\n          for (let j = 0; j < y; j++) {\n              tiles.push(<Tile coords={{x:i, y:j}}/>)\n          }\n      }\n       return tiles;\n  }\n   const createAndPopulateBoard = (x, allTiles) => {\n      let board = [];\n       for (let i = 0; i < x; i++) {\n          board.push(<div>{allTiles.filter(tile => tile.coords.x == i)}</div>)\n      }\n       return board;\n  }\n   const startingTiles = initializeTiles(props.boardSize.x, props.boardSize.y);\n  const [tiles, setTiles] = useState(startingTiles);\n   return (\n      <div>\n          {createAndPopulateBoard(props.boardSize.x, tiles)}\n      </div>\n  )\n  */\n};\n\n_s(Board, \"BRlNvNM04TCb6M9fwriXHYMs+4g=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Tile","Board","props","initializeBoard","x","y","board","column","push","row","boardArray","setBoardArray","boardSize","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAMC,eAAe,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,QAAIC,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,CAA9B,EAAiCG,MAAM,EAAvC,EAA2C;AACvCD,MAAAA,KAAK,CAACE,IAAN,CAAW,EAAX;;AAEA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,CAAxB,EAA2BI,GAAG,EAA9B,EAAkC;AAC9BH,QAAAA,KAAK,CAACC,MAAD,CAAL,CAAcC,IAAd,eAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAnB;AACH;AACJ;;AAED,WAAOF,KAAP;AACH,GAZD;;AAcA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACU,SAAN,CAAgBR,CAAjB,EAAoBF,KAAK,CAACU,SAAN,CAAgBP,CAApC,CAAhB,CAA5C;AAEA,sBACI;AAAA,cAAMK,UAAU,CAACG,GAAX,CAAeJ,GAAG,iBAAI;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAAtB;AAAN;AAAA;AAAA;AAAA;AAAA,UADJ;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQC,CArDD;;GAAMR,K;;KAAAA,K;AAuDN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\"\nimport Tile from './Tile'\n\nconst Board = props => {\n    const initializeBoard = (x, y) => {\n        let board = [];\n\n        for (let column = 0; column < x; column++) {\n            board.push([]);\n\n            for (let row = 0; row < y; row++) {\n                board[column].push(<div>Tile</div>);\n            }\n        }\n\n        return board;\n    }\n\n    const [boardArray, setBoardArray] = useState(initializeBoard(props.boardSize.x, props.boardSize.y));\n\n    return (\n        <div>{boardArray.map(row => <div>{row}</div>)}</div>\n    )\n\n    /*\n    const initializeTiles = (x, y) => {\n        let tiles = [];\n\n        for (let i = 0; i < x; i++) {\n            for (let j = 0; j < y; j++) {\n                tiles.push(<Tile coords={{x:i, y:j}}/>)\n            }\n        }\n\n        return tiles;\n    }\n\n    const createAndPopulateBoard = (x, allTiles) => {\n        let board = [];\n\n        for (let i = 0; i < x; i++) {\n            board.push(<div>{allTiles.filter(tile => tile.coords.x == i)}</div>)\n        }\n\n        return board;\n    }\n\n    const startingTiles = initializeTiles(props.boardSize.x, props.boardSize.y);\n    const [tiles, setTiles] = useState(startingTiles);\n\n    return (\n        <div>\n            {createAndPopulateBoard(props.boardSize.x, tiles)}\n        </div>\n    )\n    */\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}