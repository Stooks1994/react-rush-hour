{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport { is } from \"@babel/types\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = props => {\n  _s();\n\n  const [isOccupied, setIsOccupied] = useState(false);\n  const xCoord = props.coords.x;\n  const yCoord = props.coords.y;\n\n  const clickHandler = () => {\n    // setUserInput((prevState) => {\n    //     return { ...prevState, enteredTitle: event.target.value };   \n    // })\n    setIsOccupied(prevState => {\n      return !prevState.isOccupied;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    onClick: clickHandler,\n    children: [xCoord, yCoord, isOccupied.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tile, \"IP1vNB5XPhta9XmOweuxd3sa5cM=\");\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Tile.js"],"names":["is","React","useState","Tile","props","isOccupied","setIsOccupied","xCoord","coords","x","yCoord","y","clickHandler","prevState","toString"],"mappings":";;;AAAA,SAASA,EAAT,QAAmB,cAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMK,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAaC,CAA5B;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACI,MAAN,CAAaG,CAA5B;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB;AACA;AACA;AACAN,IAAAA,aAAa,CAAEO,SAAD,IAAe;AACzB,aAAO,CAACA,SAAS,CAACR,UAAlB;AACH,KAFY,CAAb;AAGH,GAPD;;AASA,sBACI;AAAI,IAAA,OAAO,EAAEO,YAAb;AAAA,eAA4BL,MAA5B,EAAoCG,MAApC,EAA4CL,UAAU,CAACS,QAAX,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAlBD;;GAAMX,I;;KAAAA,I;AAoBN,eAAeA,IAAf","sourcesContent":["import { is } from \"@babel/types\";\nimport React, { useState } from \"react\";\n\nconst Tile = (props) => {\n    const [isOccupied, setIsOccupied] = useState(false);\n\n    const xCoord = props.coords.x;\n    const yCoord = props.coords.y;\n\n    const clickHandler = () => {\n        // setUserInput((prevState) => {\n        //     return { ...prevState, enteredTitle: event.target.value };   \n        // })\n        setIsOccupied((prevState) => {\n            return !prevState.isOccupied;\n        })\n    }\n\n    return (\n        <td onClick={clickHandler}>{xCoord}{yCoord}{isOccupied.toString()}</td>\n    )\n}\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}