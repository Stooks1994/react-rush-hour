{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }]\n};\n\nconst initializeBoardFromPuzzle = puzzle => {\n  let board = [];\n\n  for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n    board.push([]);\n\n    for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n      board[cols].push({\n        x: cols,\n        y: rows,\n        isOccupied: false,\n        id: null\n      });\n    }\n  }\n\n  const markAsOccupied = (board, id, x, y, size, orientation) => {\n    if (orientation == 'HORIZONTAL') {\n      for (let i = 0; i < size; i++) {\n        board[x + i][y].isOccupied = true;\n        board[x + i][y].id = id;\n      }\n    } else {\n      for (let j = 0; j < size; j++) {\n        board[x][y + j].isOccupied = true;\n        board[x][y + j].id = id;\n      }\n    }\n  };\n\n  puzzle.pieces.map(piece => markAsOccupied(board, piece.id, piece.x, piece.y, piece.size, piece.orientation));\n  return board;\n};\n\nconst Board = () => {\n  _s();\n\n  const populateBoardFromPuzzle = (puzzle, occupiedSpaces) => {\n    return puzzle.pieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      occupied: occupiedSpaces,\n      updateCoords: updateOccupiedSpaces\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 43\n    }, this));\n  };\n\n  const updateOccupiedSpaces = (id, x, y, orientation, size) => {\n    const markAsUnoccupied = (element, targetId) => {\n      if (element.id == targetId) {\n        element.isOccupied = false;\n        element.id = null;\n      }\n    };\n\n    let newState = occupiedSpaces;\n    newState.forEach(row => row.forEach(element => markAsUnoccupied(element, id)));\n\n    if (orientation == 'HORIZONTAL') {\n      for (let i = 0; i < size; i++) {\n        newState[x + i][y].isOccupied = true;\n        newState[x + i][y].id = id;\n      }\n    } else {\n      for (let j = 0; j < size; j++) {\n        newState[x][y + j].isOccupied = true;\n        newState[x][y + j].id = id;\n      }\n    }\n\n    setOccupiedSpaces(newState);\n  };\n\n  const [occupiedSpaces, setOccupiedSpaces] = useState(initializeBoardFromPuzzle(TEST_PUZZLE));\n  let pieces = populateBoardFromPuzzle(TEST_PUZZLE, occupiedSpaces);\n  console.log(pieces);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"XrtWs1E2xs7xh9K5VaOc3atSZ9A=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Piece","BoardRow","BOARD_WIDTH","BOARD_HEIGHT","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","initializeBoardFromPuzzle","puzzle","board","cols","push","rows","isOccupied","markAsOccupied","i","j","map","piece","Board","populateBoardFromPuzzle","occupiedSpaces","updateOccupiedSpaces","markAsUnoccupied","element","targetId","newState","forEach","row","setOccupiedSpaces","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\"\nimport '../styling/Board.css'\n\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'}\n    ]\n};\n\nconst initializeBoardFromPuzzle = (puzzle) => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false, id:null});\n        }\n    }\n\n    const markAsOccupied = (board, id, x, y, size, orientation) => {\n        if (orientation == 'HORIZONTAL') {\n            for (let i = 0; i < size; i++) {\n                board[x + i][y].isOccupied = true;\n                board[x + i][y].id = id;\n            }\n        } else {\n            for (let j = 0; j < size; j++) {\n                board[x][y + j].isOccupied = true;\n                board[x][y + j].id = id;\n            }\n        }\n    }\n\n    puzzle.pieces.map(piece => markAsOccupied(board, piece.id, piece.x, piece.y, piece.size, piece.orientation))\n\n    return board\n}\n\nconst Board = () => {\n    const populateBoardFromPuzzle = (puzzle, occupiedSpaces) => {\n        return puzzle.pieces.map(piece => <Piece key={piece.id} pieceProps={piece} occupied={occupiedSpaces} updateCoords={updateOccupiedSpaces} />)\n    }\n\n    const updateOccupiedSpaces = (id, x, y, orientation, size) => {\n        const markAsUnoccupied = (element, targetId) => {\n            if (element.id == targetId) {\n                element.isOccupied = false;\n                element.id = null;\n            }\n        }\n\n        let newState = occupiedSpaces;\n\n        newState.forEach(row => row.forEach(element => markAsUnoccupied(element, id)))\n\n        if (orientation == 'HORIZONTAL') {\n            for (let i = 0; i < size; i++) {\n                newState[x + i][y].isOccupied = true;\n                newState[x + i][y].id = id;\n            }\n        } else {\n            for (let j = 0; j < size; j++) {\n                newState[x][y + j].isOccupied = true;\n                newState[x][y + j].id = id;\n            }\n        }\n\n        setOccupiedSpaces(newState);\n    }\n\n    const [occupiedSpaces, setOccupiedSpaces] = useState(initializeBoardFromPuzzle(TEST_PUZZLE));\n\n    let pieces = populateBoardFromPuzzle(TEST_PUZZLE, occupiedSpaces);\n\n    console.log(pieces)\n\n    return (\n        <div id='main-board' className='board'>\n            {pieces}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}