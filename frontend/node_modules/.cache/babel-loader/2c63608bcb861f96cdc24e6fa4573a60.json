{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport { is } from \"@babel/types\";\nimport React, { useState } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = props => {\n  _s();\n\n  const [isOccupied, setIsOccupied] = useState(props.coords.isOccupied);\n  const xCoord = props.coords.x;\n  const yCoord = props.coords.y;\n\n  const clickHandler = () => {\n    setIsOccupied(!isOccupied);\n    props.updateBoardState(xCoord, yCoord, !isOccupied);\n  };\n\n  if (isOccupied) {\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      axis: \"x\",\n      bounds: \"parent\",\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        onClick: clickHandler,\n        children: [xCoord, yCoord, isOccupied.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    onClick: clickHandler,\n    children: [xCoord, yCoord, isOccupied.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tile, \"rTX+Qo9Fu8EgJnGrb+ps2HzZ/TQ=\");\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Tile.js"],"names":["is","React","useState","Draggable","Tile","props","isOccupied","setIsOccupied","coords","xCoord","x","yCoord","y","clickHandler","updateBoardState","toString"],"mappings":";;;AAAA,SAASA,EAAT,QAAmB,cAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAACG,KAAK,CAACG,MAAN,CAAaF,UAAd,CAA5C;AAEA,QAAMG,MAAM,GAAGJ,KAAK,CAACG,MAAN,CAAaE,CAA5B;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACG,MAAN,CAAaI,CAA5B;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvBN,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAD,IAAAA,KAAK,CAACS,gBAAN,CAAuBL,MAAvB,EAA+BE,MAA/B,EAAuC,CAACL,UAAxC;AACH,GAHD;;AAKA,MAAIA,UAAJ,EAAgB;AACZ,wBACI,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,GAAhB;AAAoB,MAAA,MAAM,EAAC,QAA3B;AAAA,6BACI;AAAI,QAAA,OAAO,EAAEO,YAAb;AAAA,mBAA4BJ,MAA5B,EAAoCE,MAApC,EAA4CL,UAAU,CAACS,QAAX,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAED,sBACI;AAAI,IAAA,OAAO,EAAEF,YAAb;AAAA,eAA4BJ,MAA5B,EAAoCE,MAApC,EAA4CL,UAAU,CAACS,QAAX,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAtBD;;GAAMX,I;;KAAAA,I;AAwBN,eAAeA,IAAf","sourcesContent":["import { is } from \"@babel/types\";\nimport React, { useState } from \"react\";\nimport Draggable from \"react-draggable\";\n\nconst Tile = (props) => {\n    const [isOccupied, setIsOccupied] = useState(props.coords.isOccupied);\n\n    const xCoord = props.coords.x;\n    const yCoord = props.coords.y;\n\n    const clickHandler = () => {\n        setIsOccupied(!isOccupied)\n        props.updateBoardState(xCoord, yCoord, !isOccupied);\n    }\n\n    if (isOccupied) {\n        return ( \n            <Draggable axis='x' bounds='parent'>\n                <td onClick={clickHandler}>{xCoord}{yCoord}{isOccupied.toString()}</td>\n            </Draggable>\n        )\n    }\n\n    return (\n        <td onClick={clickHandler}>{xCoord}{yCoord}{isOccupied.toString()}</td>\n    )\n}\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}