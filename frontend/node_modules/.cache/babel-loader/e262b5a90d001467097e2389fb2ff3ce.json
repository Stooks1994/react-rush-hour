{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }]\n};\n\nconst initializeEmptyBoard = () => {\n  let board = [];\n\n  for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n    board.push([]);\n\n    for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n      board[cols].push({\n        x: cols,\n        y: rows,\n        isOccupied: false\n      });\n    }\n  }\n\n  return board;\n};\n\nconst populateBoardFromPuzzle = puzzle => {\n  return puzzle.pieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n    pieceProps: piece\n  }, piece.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 39\n  }, this));\n};\n\nconst Board = () => {\n  _s();\n\n  const [boardState, setBoardState] = useState(initializeEmptyBoard());\n  let pieces = populateBoardFromPuzzle(TEST_PUZZLE);\n  console.log(pieces);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n/*\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\n\nconst initializeEmptyBoard = () => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false});\n        }\n    }\n\n    return board\n}\n\nconst Board = () => {\n    const [boardState, setBoardState] = useState(initializeEmptyBoard());\n\n    const updateBoardState = (xCoord, yCoord, isOccupied) => {\n        let newState = boardState;\n        newState[xCoord][yCoord].isOccupied = isOccupied;\n\n        setBoardState(newState);\n    }\n\n    return (\n        <table className='board'>\n            <tbody className='board__tbody'>\n                <BoardRow ids={boardState[0]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[1]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[2]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[3]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[4]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[5]} updateBoardState={updateBoardState} />\n            </tbody>\n        </table>\n    )\n}\n*/\n\n\n_s(Board, \"otH/Zp/1pqlnOXKqF1ijNx0bMmI=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Piece","BoardRow","BOARD_WIDTH","BOARD_HEIGHT","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","initializeEmptyBoard","board","cols","push","rows","isOccupied","populateBoardFromPuzzle","puzzle","map","piece","Board","boardState","setBoardState","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,sBAAP;;AAEA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,CACJ;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GADI,EAEJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,UAAtC;AAAkDC,IAAAA,KAAK,EAAC;AAAxD,GAFI,EAGJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GAHI;AADQ,CAApB;;AAQA,MAAMC,oBAAoB,GAAG,MAAM;AAC/B,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGZ,WAA1B,EAAuCY,IAAI,EAA3C,EAA+C;AAC3CD,IAAAA,KAAK,CAACE,IAAN,CAAW,EAAX;;AAEA,SAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGb,YAA1B,EAAwCa,IAAI,EAA5C,EAAgD;AAC5CH,MAAAA,KAAK,CAACC,IAAD,CAAL,CAAYC,IAAZ,CAAiB;AAACR,QAAAA,CAAC,EAACO,IAAH;AAASN,QAAAA,CAAC,EAACQ,IAAX;AAAiBC,QAAAA,UAAU,EAAC;AAA5B,OAAjB;AACH;AACJ;;AAED,SAAOJ,KAAP;AACH,CAZD;;AAcA,MAAMK,uBAAuB,GAAGC,MAAM,IAAI;AACtC,SAAOA,MAAM,CAACd,MAAP,CAAce,GAAd,CAAkBC,KAAK,iBAAI,QAAC,KAAD;AAAsB,IAAA,UAAU,EAAEA;AAAlC,KAAYA,KAAK,CAACf,EAAlB;AAAA;AAAA;AAAA;AAAA,UAA3B,CAAP;AACH,CAFD;;AAIA,MAAMgB,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAACa,oBAAoB,EAArB,CAA5C;AAEA,MAAIP,MAAM,GAAGa,uBAAuB,CAACd,WAAD,CAApC;AAEAqB,EAAAA,OAAO,CAACC,GAAR,CAAYrB,MAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAvDMiB,K;;KAAAA,K;AAwDN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\"\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\"\nimport '../styling/Board.css'\n\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'}\n    ]\n};\n\nconst initializeEmptyBoard = () => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false});\n        }\n    }\n\n    return board\n}\n\nconst populateBoardFromPuzzle = puzzle => {\n    return puzzle.pieces.map(piece => <Piece key={piece.id} pieceProps={piece} />)\n}\n\nconst Board = () => {\n    const [boardState, setBoardState] = useState(initializeEmptyBoard());\n\n    let pieces = populateBoardFromPuzzle(TEST_PUZZLE);\n\n    console.log(pieces)\n\n    return (\n        <div className='board'>\n            {pieces}\n        </div>\n    )\n}\n\n/*\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\n\nconst initializeEmptyBoard = () => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false});\n        }\n    }\n\n    return board\n}\n\nconst Board = () => {\n    const [boardState, setBoardState] = useState(initializeEmptyBoard());\n\n    const updateBoardState = (xCoord, yCoord, isOccupied) => {\n        let newState = boardState;\n        newState[xCoord][yCoord].isOccupied = isOccupied;\n\n        setBoardState(newState);\n    }\n\n    return (\n        <table className='board'>\n            <tbody className='board__tbody'>\n                <BoardRow ids={boardState[0]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[1]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[2]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[3]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[4]} updateBoardState={updateBoardState} />\n                <BoardRow ids={boardState[5]} updateBoardState={updateBoardState} />\n            </tbody>\n        </table>\n    )\n}\n*/\nexport default Board"]},"metadata":{},"sourceType":"module"}