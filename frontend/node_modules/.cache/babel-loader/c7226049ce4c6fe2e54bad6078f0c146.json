{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, h, w, axis, color, coordHandler) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  let height = h * SIZE_MOD;\n  let width = w * SIZE_MOD;\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: axis,\n    bounds: \"parent\",\n    onStop: coordHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: `${xPos}%`,\n        top: `${yPos}%`,\n        height: `${height}%`,\n        width: `${width}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n\n  const passNewCoordsToParent = () => {\n    props.updateCoords(props.pieceProps.id, currX, currY);\n  };\n\n  let currPiece = props.pieceProps.orientation == 'HORIZONTAL' ? preparePiece(currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color, passNewCoordsToParent) : preparePiece(currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color, passNewCoordsToParent);\n  return currPiece;\n};\n\n_s(Piece, \"/A3MDO/EzisF3q3SKiJ9PBrtAyo=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useState","Draggable","BOARD_SIZE","SIZE_MOD","preparePiece","x","y","h","w","axis","color","coordHandler","xPos","yPos","height","width","position","left","top","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","passNewCoordsToParent","updateCoords","id","currPiece","orientation","size"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,QAAQ,GAAG,MAAMD,UAAvB;;AAEA,MAAME,YAAY,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,YAA1B,KAA2C;AAC5D,MAAIC,IAAI,GAAGP,CAAC,GAAGF,QAAf;AACA,MAAIU,IAAI,GAAGP,CAAC,GAAGH,QAAf;AACA,MAAIW,MAAM,GAAGP,CAAC,GAAGJ,QAAjB;AACA,MAAIY,KAAK,GAAGP,CAAC,GAAGL,QAAhB;AAEA,sBACI,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEM,IAAjB;AAAuB,IAAA,MAAM,EAAC,QAA9B;AAAuC,IAAA,MAAM,EAAEE,YAA/C;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AACRK,QAAAA,QAAQ,EAAC,UADD;AAERC,QAAAA,IAAI,EAAE,GAAEL,IAAK,GAFL;AAGRM,QAAAA,GAAG,EAAE,GAAEL,IAAK,GAHJ;AAIRC,QAAAA,MAAM,EAAE,GAAEA,MAAO,GAJT;AAKRC,QAAAA,KAAK,EAAE,GAAEA,KAAM,GALP;AAMRI,QAAAA,eAAe,EAAE,GAAET,KAAM;AANjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAlBD;;AAoBA,MAAMU,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAACqB,KAAK,CAACG,UAAN,CAAiBnB,CAAlB,CAAlC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAACqB,KAAK,CAACG,UAAN,CAAiBlB,CAAlB,CAAlC;;AAEA,QAAMqB,qBAAqB,GAAG,MAAM;AAChCN,IAAAA,KAAK,CAACO,YAAN,CAAmBP,KAAK,CAACG,UAAN,CAAiBK,EAApC,EAAwCP,KAAxC,EAA+CG,KAA/C;AACH,GAFD;;AAIA,MAAIK,SAAS,GAAGT,KAAK,CAACG,UAAN,CAAiBO,WAAjB,IAAgC,YAAhC,GACV3B,YAAY,CAACkB,KAAD,EAAQG,KAAR,EAAe,CAAf,EAAkBJ,KAAK,CAACG,UAAN,CAAiBQ,IAAnC,EAAyC,GAAzC,EAA8CX,KAAK,CAACG,UAAN,CAAiBd,KAA/D,EAAsEiB,qBAAtE,CADF,GAEVvB,YAAY,CAACkB,KAAD,EAAQG,KAAR,EAAeJ,KAAK,CAACG,UAAN,CAAiBQ,IAAhC,EAAsC,CAAtC,EAAyC,GAAzC,EAA8CX,KAAK,CAACG,UAAN,CAAiBd,KAA/D,EAAsEiB,qBAAtE,CAFlB;AAIA,SAAOG,SAAP;AACH,CAbD;;GAAMV,K;;KAAAA,K;AAeN,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, h, w, axis, color, coordHandler) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    return (\n        <Draggable axis={axis} bounds='parent' onStop={coordHandler}>\n            <div style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n\n    const passNewCoordsToParent = () => {\n        props.updateCoords(props.pieceProps.id, currX, currY);\n    }\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color, passNewCoordsToParent)\n        : preparePiece(currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color, passNewCoordsToParent);\n\n    return currPiece;\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}