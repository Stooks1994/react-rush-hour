{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }]\n};\n\nconst initializeEmptyBoard = puzzle => {\n  let board = [];\n\n  for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n    board.push([]);\n\n    for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n      board[cols].push({\n        x: cols,\n        y: rows,\n        isOccupied: false,\n        id: null\n      });\n    }\n  }\n\n  for (piece in puzzle.pieces) {\n    for (let i = 0; i < piece.size; i++) {}\n  }\n\n  return board;\n};\n\nconst Board = () => {\n  _s();\n\n  const populateBoardFromPuzzle = puzzle => {\n    return puzzle.pieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      updateCoords: updateOccupiedSpaces\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 43\n    }, this));\n  };\n\n  const updateOccupiedSpaces = (id, x, y, orientation, size) => {};\n\n  let pieces = populateBoardFromPuzzle(TEST_PUZZLE);\n  const [occupiedSpaces, setOccupiedSpaces] = useState(initializeEmptyBoard(TEST_PUZZLE));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"RO5cy/iImxKjJj2bt6OnH3/xDOs=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Piece","BoardRow","BOARD_WIDTH","BOARD_HEIGHT","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","initializeEmptyBoard","puzzle","board","cols","push","rows","isOccupied","piece","i","Board","populateBoardFromPuzzle","map","updateOccupiedSpaces","occupiedSpaces","setOccupiedSpaces"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Piece from \"./Piece\";\nimport BoardRow from \"./BoardRow\"\nimport '../styling/Board.css'\n\nconst BOARD_WIDTH = 6;\nconst BOARD_HEIGHT = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'}\n    ]\n};\n\nconst initializeEmptyBoard = (puzzle) => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_WIDTH; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_HEIGHT; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false, id:null});\n        }\n    }\n\n    for (piece in puzzle.pieces) {\n        for (let i = 0; i < piece.size; i++) {\n\n        }\n    }\n\n    return board\n}\n\nconst Board = () => {\n    const populateBoardFromPuzzle = puzzle => {\n        return puzzle.pieces.map(piece => <Piece key={piece.id} pieceProps={piece} updateCoords={updateOccupiedSpaces} />)\n    }\n\n    const updateOccupiedSpaces = (id, x, y, orientation, size) => {\n        \n    }\n\n    let pieces = populateBoardFromPuzzle(TEST_PUZZLE);\n\n    const [occupiedSpaces, setOccupiedSpaces] = useState(initializeEmptyBoard(TEST_PUZZLE));\n\n    return (\n        <div id='main-board' className='board'>\n            {pieces}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}