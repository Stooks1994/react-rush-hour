{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Piece from \"./Piece\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }]\n};\n/*\nconst initializeBoardFromPuzzle = (puzzle) => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_SIZE; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_SIZE; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false, id:null});\n        }\n    }\n\n    const markAsOccupied = (board, id, x, y, size, orientation) => {\n        if (orientation == 'HORIZONTAL') {\n            for (let i = 0; i < size; i++) {\n                board[x + i][y].isOccupied = true;\n                board[x + i][y].id = id;\n            }\n        } else {\n            for (let j = 0; j < size; j++) {\n                board[x][y + j].isOccupied = true;\n                board[x][y + j].id = id;\n            }\n        }\n    }\n\n    puzzle.pieces.map(piece => markAsOccupied(board, piece.id, piece.x, piece.y, piece.size, piece.orientation))\n\n    return board\n}\n*/\n\nconst Board = () => {\n  _s();\n\n  const populateBoardFromPuzzle = puzzle => {\n    return puzzle.pieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      onFinishedDragging: updatePiecesOnBoard\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 43\n    }, this));\n  };\n\n  const updatePiecesOnBoard = (id, newBin, orientation) => {\n    // setUserInput((prevState) => {\n    //     return { ...prevState, enteredTitle: event.target.value };   \n    // })\n    setPiecesOnBoard(prevState => {\n      /*\n      let newState = prevState.pieces.forEach(element => {\n          if (element.id === id) {\n              if (orientation == 'HORIZONTAL') {\n                  element.x = newBin;\n              } else {\n                  element.y = newBin;\n              }\n          }\n      })\n       return newState;\n      */\n      console.log(prevState);\n      return prevState;\n    });\n  };\n\n  const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE);\n  console.log(piecesOnBoard);\n  let pieces = populateBoardFromPuzzle(piecesOnBoard);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"XBQ1VGlJRLJBkh/EeMNxv5TLnAc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Piece","BOARD_SIZE","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","Board","populateBoardFromPuzzle","puzzle","map","piece","updatePiecesOnBoard","newBin","setPiecesOnBoard","prevState","console","log","piecesOnBoard"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,CACJ;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GADI,EAEJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,UAAtC;AAAkDC,IAAAA,KAAK,EAAC;AAAxD,GAFI,EAGJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GAHI;AADQ,CAApB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,uBAAuB,GAAIC,MAAD,IAAY;AACxC,WAAOA,MAAM,CAACT,MAAP,CAAcU,GAAd,CAAkBC,KAAK,iBAAI,QAAC,KAAD;AAAsB,MAAA,UAAU,EAAEA,KAAlC;AAAyC,MAAA,kBAAkB,EAAEC;AAA7D,OAAYD,KAAK,CAACV,EAAlB;AAAA;AAAA;AAAA;AAAA,YAA3B,CAAP;AACH,GAFD;;AAIA,QAAMW,mBAAmB,GAAG,CAACX,EAAD,EAAKY,MAAL,EAAaR,WAAb,KAA6B;AACrD;AACA;AACA;AAEAS,IAAAA,gBAAgB,CAAEC,SAAD,IAAe;AAC5B;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGYC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,aAAOA,SAAP;AACH,KAjBe,CAAhB;AAkBH,GAvBD;;AAyBA,QAAM,CAACG,aAAD,EAAgBJ,gBAAhB,IAAoClB,QAAQ,CAACG,WAAD,CAAlD;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAYC,aAAZ;AAEA,MAAIlB,MAAM,GAAGQ,uBAAuB,CAACU,aAAD,CAApC;AAEA,sBACI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAA,cACKlB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAzCD;;GAAMO,K;;KAAAA,K;AA2CN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'}\n    ]\n};\n/*\nconst initializeBoardFromPuzzle = (puzzle) => {\n    let board = []\n\n    for (let cols = 0; cols < BOARD_SIZE; cols++) {\n        board.push([]);\n\n        for (let rows = 0; rows < BOARD_SIZE; rows++) {\n            board[cols].push({x:cols, y:rows, isOccupied:false, id:null});\n        }\n    }\n\n    const markAsOccupied = (board, id, x, y, size, orientation) => {\n        if (orientation == 'HORIZONTAL') {\n            for (let i = 0; i < size; i++) {\n                board[x + i][y].isOccupied = true;\n                board[x + i][y].id = id;\n            }\n        } else {\n            for (let j = 0; j < size; j++) {\n                board[x][y + j].isOccupied = true;\n                board[x][y + j].id = id;\n            }\n        }\n    }\n\n    puzzle.pieces.map(piece => markAsOccupied(board, piece.id, piece.x, piece.y, piece.size, piece.orientation))\n\n    return board\n}\n*/\n\nconst Board = () => {\n    const populateBoardFromPuzzle = (puzzle) => {\n        return puzzle.pieces.map(piece => <Piece key={piece.id} pieceProps={piece} onFinishedDragging={updatePiecesOnBoard} />)\n    }\n\n    const updatePiecesOnBoard = (id, newBin, orientation) => {\n        // setUserInput((prevState) => {\n        //     return { ...prevState, enteredTitle: event.target.value };   \n        // })\n\n        setPiecesOnBoard((prevState) => {\n            /*\n            let newState = prevState.pieces.forEach(element => {\n                if (element.id === id) {\n                    if (orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            return newState;\n            */\n\n            console.log(prevState)\n            return prevState;\n        })\n    }\n\n    const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE);\n\n    console.log(piecesOnBoard);\n\n    let pieces = populateBoardFromPuzzle(piecesOnBoard);\n\n    return (\n        <div id='main-board' className='board'>\n            {pieces}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}