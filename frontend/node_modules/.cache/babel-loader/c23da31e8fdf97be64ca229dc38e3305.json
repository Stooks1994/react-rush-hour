{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\nconst AXIS = {\n  x: 'x',\n  y: 'y'\n};\n\nconst calculateBounds = (id, x, y, h, w, allPieces, axis) => {\n  let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n  let tileSize = boardBoundingRect.width / BOARD_SIZE;\n  let left = parseInt(0 - x * tileSize);\n  let top = parseInt(0 - y * tileSize);\n  let right = parseInt(boardBoundingRect.width - (w + x) * tileSize);\n  let bottom = parseInt(boardBoundingRect.height - (h + y) * tileSize);\n  allPieces.forEach(otherPiece => {\n    if (id != otherPiece.id) {\n      if (axis == AXIS.x) {\n        if (x >= otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n          left = parseInt(0 - (x - (otherPiece.x + otherPiece.w)) * tileSize);\n        } else if (x < otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n          right = parseInt(otherPiece.x * tileSize - (x + w) * tileSize);\n        }\n      } else if (axis == AXIS.y) {\n        if (y >= otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n          top = parseInt(0 - (y - (otherPiece.y + otherPiece.h)) * tileSize);\n        } else if (y < otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n          bottom = parseInt(otherPiece.y * tileSize - (y + h) * tileSize);\n        }\n      }\n    }\n  });\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n};\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  let height = h * SIZE_MOD;\n  let width = w * SIZE_MOD;\n  let bounds = calculateBounds(id, x, y, h, w, allPieces, axis);\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: axis,\n    bounds: bounds,\n    onStop: coordHandler,\n    position: {\n      x: 0,\n      y: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: id,\n      style: {\n        position: 'absolute',\n        left: `${xPos}%`,\n        top: `${yPos}%`,\n        height: `${height}%`,\n        width: `${width}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n\n  const passNewBinToParent = () => {\n    let currElement = document.getElementById(props.pieceProps.id);\n    let boardPx = document.getElementById('main-board').getBoundingClientRect().width;\n    let vals = currElement.style.transform.match(/-?[0-9]+/gm);\n    let tileSize = boardPx / BOARD_SIZE;\n\n    if (vals.length == 1 && vals[0] != \"0\") {\n      // Only has transform in X direction\n      let xTransform = Number(vals[0]);\n      let newOffset = currElement.offsetLeft + xTransform;\n      let newBin = 0;\n\n      if (newOffset <= 0.5 * tileSize) {\n        newBin = 0;\n      } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n        newBin = 1;\n      } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n        newBin = 2;\n      } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n        newBin = 3;\n      } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n        newBin = 4;\n      } else {\n        newBin = 5;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    } else if (vals.length == 2) {\n      // Has transforms for both X and Y directions -- X will be 0\n      let yTransform = Number(vals[1]);\n      let newOffset = currElement.offsetTop + yTransform;\n      let newBin = 0;\n\n      if (newOffset <= 0.5 * tileSize) {\n        newBin = 0;\n      } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n        newBin = 1;\n      } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n        newBin = 2;\n      } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n        newBin = 3;\n      } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n        newBin = 4;\n      } else {\n        newBin = 5;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    }\n  };\n\n  let currPiece = props.pieceProps.orientation == 'HORIZONTAL' ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent) : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent);\n  return currPiece;\n};\n\n_s(Piece, \"/A3MDO/EzisF3q3SKiJ9PBrtAyo=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useEffect","useState","Draggable","BOARD_SIZE","SIZE_MOD","AXIS","x","y","calculateBounds","id","h","w","allPieces","axis","boardBoundingRect","document","getElementById","getBoundingClientRect","tileSize","width","left","parseInt","top","right","bottom","height","forEach","otherPiece","preparePiece","color","coordHandler","xPos","yPos","bounds","position","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","passNewBinToParent","currElement","boardPx","vals","style","transform","match","length","xTransform","Number","newOffset","offsetLeft","newBin","onFinishedDragging","yTransform","offsetTop","currPiece","orientation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst AXIS = {\n    x: 'x',\n    y: 'y'\n}\n\nconst calculateBounds = (id, x, y, h, w, allPieces, axis) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n    let tileSize = boardBoundingRect.width / BOARD_SIZE;\n\n    let left = parseInt(0 - (x * tileSize));\n    let top = parseInt(0 - (y * tileSize));\n    let right = parseInt(boardBoundingRect.width - ((w + x) * tileSize));\n    let bottom = parseInt(boardBoundingRect.height - ((h + y) * tileSize));\n    \n    allPieces.forEach(otherPiece => {\n        if (id != otherPiece.id) {\n            if (axis == AXIS.x) {\n                if (x >= otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    left = parseInt(0 - ((x - (otherPiece.x + otherPiece.w)) * tileSize))\n                } else if (x < otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    right = parseInt((otherPiece.x * tileSize) - ((x + w) * tileSize))\n                }\n            } else if (axis == AXIS.y) {\n                if (y >= otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    top = parseInt(0 - ((y - (otherPiece.y + otherPiece.h)) * tileSize))\n                } else if (y < otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    bottom = parseInt((otherPiece.y * tileSize) - ((y + h) * tileSize))\n                }\n            }\n        }\n    })\n\n    return {\n        left: left, \n        top: top, \n        right: right, \n        bottom: bottom\n    }\n}\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    let bounds = calculateBounds(id, x, y, h, w, allPieces, axis)\n\n    return (\n        <Draggable axis={axis} bounds={bounds} onStop={coordHandler} position={{x:0, y:0}}>\n            <div id={id} style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n\n    const passNewBinToParent = () => {\n        let currElement = document.getElementById(props.pieceProps.id)\n\n        let boardPx = document.getElementById('main-board').getBoundingClientRect().width\n        let vals = currElement.style.transform.match(/-?[0-9]+/gm)\n        let tileSize = boardPx / BOARD_SIZE;\n\n        if (vals.length == 1 && vals[0] != \"0\") {\n            // Only has transform in X direction\n            let xTransform = Number(vals[0])\n            let newOffset = currElement.offsetLeft + xTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n\n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        } else if (vals.length == 2) {\n            // Has transforms for both X and Y directions -- X will be 0\n            let yTransform = Number(vals[1])\n            let newOffset = currElement.offsetTop + yTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n            \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        }\n    }\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent)\n        : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent);\n\n    return currPiece;\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}