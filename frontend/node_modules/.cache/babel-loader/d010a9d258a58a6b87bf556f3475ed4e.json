{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Piece from \"./Piece\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }, {\n    id: 3,\n    x: 5,\n    y: 0,\n    size: 1,\n    orientation: 'HORIZONTAL',\n    color: 'green'\n  }]\n};\n\nconst Board = () => {\n  _s();\n\n  const [isMounted, setIsMounted] = useState(false);\n\n  const populateBoardFromPuzzle = puzzlePieces => {\n    let newPieces = puzzlePieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      allPieces: puzzlePieces,\n      onFinishedDragging: updatePiecesOnBoard\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this));\n    setPieces(newPieces);\n    return newPieces;\n  };\n\n  const updatePiecesOnBoard = (id, newBin) => {\n    setPiecesOnBoard(prevState => {\n      let newState = prevState;\n      newState.forEach(element => {\n        if (element.id === id) {\n          if (element.orientation == 'HORIZONTAL') {\n            element.x = newBin;\n          } else if (element.orientation == 'VERTICAL') {\n            element.y = newBin;\n          }\n        }\n      });\n      console.log(newState);\n      return newState;\n    });\n  };\n\n  const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n  const [pieces, setPieces] = useState(populateBoardFromPuzzle(piecesOnBoard));\n  useEffect(() => {\n    setIsMounted(true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: isMounted && pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"3lvQfOGSYLMmqmJujmq/vuCg07k=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","useEffect","Piece","BOARD_SIZE","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","Board","isMounted","setIsMounted","populateBoardFromPuzzle","puzzlePieces","newPieces","map","piece","updatePiecesOnBoard","setPieces","newBin","setPiecesOnBoard","prevState","newState","forEach","element","console","log","piecesOnBoard"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'},\n        {id:3, x:5, y:0, size:1, orientation: 'HORIZONTAL', color:'green'}\n    ]\n};\n\nconst Board = () => {\n    const [isMounted, setIsMounted] = useState(false);\n\n    const populateBoardFromPuzzle = puzzlePieces => {\n        let newPieces = puzzlePieces.map(piece => (\n            <Piece \n                key={piece.id} \n                pieceProps={piece} \n                allPieces={puzzlePieces} \n                onFinishedDragging={updatePiecesOnBoard} \n            />)\n        )\n\n        setPieces(newPieces)\n\n        return newPieces;\n    }\n\n    const updatePiecesOnBoard = (id, newBin) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState;\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (element.orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else if (element.orientation == 'VERTICAL') {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            console.log(newState)\n\n            return newState;\n        })\n    }\n\n    const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n    const [pieces, setPieces] = useState(populateBoardFromPuzzle(piecesOnBoard))\n\n    useEffect(() => {setIsMounted(true)})\n\n    return (\n        <div id='main-board' className='board'>\n            {isMounted && pieces}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}