{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Piece from \"./Piece\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }, {\n    id: 3,\n    x: 5,\n    y: 0,\n    size: 1,\n    orientation: 'HORIZONTAL',\n    color: 'green'\n  }]\n};\n\nconst Board = () => {\n  _s();\n\n  const [isMounted, setIsMounted] = useState(false);\n  const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n\n  const populateBoardFromPuzzle = puzzlePieces => {\n    return puzzlePieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      allPieces: puzzlePieces,\n      onFinishedDragging: updatePiecesOnBoard\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this));\n  };\n\n  const snapToBin = (element, bin) => {\n    let tileSize = document.getElementById('main-board').getBoundingClientRect().width / BOARD_SIZE;\n    let curr = document.getElementById(element.id);\n    let transforms = curr.style.transform.match(/-?[0-9]+/gm);\n    let pxToClosestBin = 0;\n\n    if (transforms.size == 1) {\n      pxToClosestBin = transforms[0] % tileSize;\n      element.style.transform = pxToClosestBin >= tileSize / 2 ? `translate(${transforms[0] + pxToClosestBin}px)` : `translate(${transforms[0] - pxToClosestBin}px)`;\n    } else {}\n  };\n\n  const updatePiecesOnBoard = (id, newBin) => {\n    setPiecesOnBoard(prevState => {\n      let newState = prevState.slice();\n      newState.forEach(element => {\n        if (element.id === id) {\n          if (element.orientation == 'HORIZONTAL') {\n            element.x = newBin;\n          } else if (element.orientation == 'VERTICAL') {\n            element.y = newBin;\n          }\n\n          snapToBin(element, newBin);\n        }\n      });\n      return newState;\n    });\n  };\n\n  useEffect(() => {\n    setIsMounted(true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: isMounted && populateBoardFromPuzzle(piecesOnBoard)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"zAFtJFYbTGTJjq59x0HkrQeWqqI=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","useEffect","Piece","BOARD_SIZE","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","Board","isMounted","setIsMounted","piecesOnBoard","setPiecesOnBoard","populateBoardFromPuzzle","puzzlePieces","map","piece","updatePiecesOnBoard","snapToBin","element","bin","tileSize","document","getElementById","getBoundingClientRect","width","curr","transforms","style","transform","match","pxToClosestBin","newBin","prevState","newState","slice","forEach"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'},\n        {id:3, x:5, y:0, size:1, orientation: 'HORIZONTAL', color:'green'}\n    ]\n};\n\nconst Board = () => {\n    const [isMounted, setIsMounted] = useState(false);\n    const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n\n    const populateBoardFromPuzzle = puzzlePieces => {\n        return puzzlePieces.map(piece => (\n            <Piece \n                key={piece.id} \n                pieceProps={piece} \n                allPieces={puzzlePieces} \n                onFinishedDragging={updatePiecesOnBoard} \n            />)\n        )\n    }\n\n    const snapToBin = (element, bin) => {\n        let tileSize = document.getElementById('main-board').getBoundingClientRect().width / BOARD_SIZE;\n        let curr = document.getElementById(element.id)\n        let transforms = curr.style.transform.match(/-?[0-9]+/gm)\n\n        let pxToClosestBin = 0;\n\n        if (transforms.size == 1) {\n            pxToClosestBin = transforms[0] % tileSize;\n            element.style.transform = pxToClosestBin >= (tileSize / 2) \n                ? `translate(${transforms[0] + pxToClosestBin}px)` \n                : `translate(${transforms[0] - pxToClosestBin}px)`;\n        } else {\n\n        }\n    }\n\n    const updatePiecesOnBoard = (id, newBin) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState.slice();\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (element.orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else if (element.orientation == 'VERTICAL') {\n                        element.y = newBin;\n                    }\n\n                    snapToBin(element, newBin);\n                }\n            })\n\n            return newState;\n        })\n    }\n\n    useEffect(() => {setIsMounted(true)})\n\n    return (\n        <div id='main-board' className='board'>\n            {isMounted && populateBoardFromPuzzle(piecesOnBoard)}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}