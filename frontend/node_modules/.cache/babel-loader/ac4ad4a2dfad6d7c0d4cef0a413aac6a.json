{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Piece from \"./Piece\";\nimport '../styling/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst TEST_PUZZLE = {\n  pieces: [{\n    id: 0,\n    x: 0,\n    y: 0,\n    size: 2,\n    orientation: 'HORIZONTAL',\n    color: 'red'\n  }, {\n    id: 1,\n    x: 0,\n    y: 1,\n    size: 2,\n    orientation: 'VERTICAL',\n    color: 'pink'\n  }, {\n    id: 2,\n    x: 3,\n    y: 5,\n    size: 3,\n    orientation: 'HORIZONTAL',\n    color: 'blue'\n  }]\n};\n\nconst Board = () => {\n  _s();\n\n  const populateBoardFromPuzzle = puzzlePieces => {\n    return puzzlePieces.map(piece => /*#__PURE__*/_jsxDEV(Piece, {\n      pieceProps: piece,\n      onFinishedDragging: updatePiecesOnBoard\n    }, piece.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 42\n    }, this));\n  };\n\n  const updatePiecesOnBoard = (id, newBin, orientation) => {\n    setPiecesOnBoard(prevState => {\n      let newState = prevState;\n      newState.forEach(element => {\n        if (element.id === id) {\n          if (orientation == 'HORIZONTAL') {\n            element.x = newBin;\n          } else {\n            element.y = newBin;\n          }\n        }\n      });\n      console.log(newState);\n      return newState;\n    });\n  };\n\n  const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n  let pieces = populateBoardFromPuzzle(piecesOnBoard);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-board\",\n    className: \"board\",\n    children: pieces\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"aIaBdorPi+xWk5gJ7Tf5bxHkp/c=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Board.js"],"names":["React","useState","Piece","BOARD_SIZE","TEST_PUZZLE","pieces","id","x","y","size","orientation","color","Board","populateBoardFromPuzzle","puzzlePieces","map","piece","updatePiecesOnBoard","newBin","setPiecesOnBoard","prevState","newState","forEach","element","console","log","piecesOnBoard"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,UAAU,GAAG,CAAnB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,CACJ;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GADI,EAEJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,UAAtC;AAAkDC,IAAAA,KAAK,EAAC;AAAxD,GAFI,EAGJ;AAACL,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,CAAC,EAAC,CAAT;AAAYC,IAAAA,CAAC,EAAC,CAAd;AAAiBC,IAAAA,IAAI,EAAC,CAAtB;AAAyBC,IAAAA,WAAW,EAAE,YAAtC;AAAoDC,IAAAA,KAAK,EAAC;AAA1D,GAHI;AADQ,CAApB;;AAQA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,uBAAuB,GAAGC,YAAY,IAAI;AAC5C,WAAOA,YAAY,CAACC,GAAb,CAAiBC,KAAK,iBAAI,QAAC,KAAD;AAAsB,MAAA,UAAU,EAAEA,KAAlC;AAAyC,MAAA,kBAAkB,EAAEC;AAA7D,OAAYD,KAAK,CAACV,EAAlB;AAAA;AAAA;AAAA;AAAA,YAA1B,CAAP;AACH,GAFD;;AAIA,QAAMW,mBAAmB,GAAG,CAACX,EAAD,EAAKY,MAAL,EAAaR,WAAb,KAA6B;AACrDS,IAAAA,gBAAgB,CAAEC,SAAD,IAAe;AAC5B,UAAIC,QAAQ,GAAGD,SAAf;AAEAC,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,OAAO,IAAI;AACxB,YAAIA,OAAO,CAACjB,EAAR,KAAeA,EAAnB,EAAuB;AACnB,cAAII,WAAW,IAAI,YAAnB,EAAiC;AAC7Ba,YAAAA,OAAO,CAAChB,CAAR,GAAYW,MAAZ;AACH,WAFD,MAEO;AACHK,YAAAA,OAAO,CAACf,CAAR,GAAYU,MAAZ;AACH;AACJ;AACJ,OARD;AAUAM,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,aAAOA,QAAP;AACH,KAhBe,CAAhB;AAiBH,GAlBD;;AAoBA,QAAM,CAACK,aAAD,EAAgBP,gBAAhB,IAAoClB,QAAQ,CAACG,WAAW,CAACC,MAAb,CAAlD;AAEA,MAAIA,MAAM,GAAGQ,uBAAuB,CAACa,aAAD,CAApC;AAEA,sBACI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAA,cACKrB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCD;;GAAMO,K;;KAAAA,K;AAoCN,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst BOARD_SIZE = 6;\n\nconst TEST_PUZZLE = {\n    pieces: [\n        {id:0, x:0, y:0, size:2, orientation: 'HORIZONTAL', color:'red'},\n        {id:1, x:0, y:1, size:2, orientation: 'VERTICAL', color:'pink'},\n        {id:2, x:3, y:5, size:3, orientation: 'HORIZONTAL', color:'blue'}\n    ]\n};\n\nconst Board = () => {\n    const populateBoardFromPuzzle = puzzlePieces => {\n        return puzzlePieces.map(piece => <Piece key={piece.id} pieceProps={piece} onFinishedDragging={updatePiecesOnBoard} />)\n    }\n\n    const updatePiecesOnBoard = (id, newBin, orientation) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState;\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            console.log(newState);\n\n            return newState;\n        })\n    }\n\n    const [piecesOnBoard, setPiecesOnBoard] = useState(TEST_PUZZLE.pieces);\n\n    let pieces = populateBoardFromPuzzle(piecesOnBoard);\n\n    return (\n        <div id='main-board' className='board'>\n            {pieces}\n        </div>\n    )\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}