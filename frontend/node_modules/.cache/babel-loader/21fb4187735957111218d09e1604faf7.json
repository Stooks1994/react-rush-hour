{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\nconst AXIS = {\n  x: 'x',\n  y: 'y'\n};\n\nconst calculateBoundsFromOtherPiece = (parentBound, currPos, otherPos, otherSize) => {};\n\nconst calculateInitialBounds = (id, x, y, h, w, allPieces, axis) => {\n  let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n  let tileSize = boardBoundingRect.width / BOARD_SIZE;\n  let left = parseInt(0 - x * tileSize);\n  let top = parseInt(0 - y * tileSize);\n  let right = parseInt(boardBoundingRect.width - (w + x) * tileSize);\n  let bottom = parseInt(boardBoundingRect.height - (h + y) * tileSize);\n  allPieces.forEach(otherPiece => {\n    if (id != otherPiece.id) {\n      if (axis == AXIS.x) {\n        if (x >= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n          left = parseInt(0 - (x - (otherPiece.x + otherPiece.size)) * tileSize);\n        } else if (x <= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n          right = parseInt(boardBoundingRect.width - (w + x + otherPiece.size) * tileSize);\n        }\n      } else if (axis == AXIS.y) {}\n    }\n  }); //console.log(\"not mounted: \" + left + \" \" + top + \" \" + right + \" \" + bottom)\n\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n};\n\nconst calculateNewBounds = (id, x, y, h, w, allPieces, axis) => {\n  let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n  let currElement = document.getElementById(id);\n  let tileSize = boardBoundingRect.width / BOARD_SIZE;\n  let left = parseInt(0 - currElement.offsetLeft);\n  let top = parseInt(0 - currElement.offsetTop);\n  let right = parseInt(boardBoundingRect.width - (w * tileSize + currElement.offsetLeft));\n  let bottom = parseInt(boardBoundingRect.height - (h * tileSize + currElement.offsetTop));\n  allPieces.forEach(otherPiece => {\n    if (id != otherPiece.id) {\n      let otherElement = document.getElementById(otherPiece.id);\n\n      if (axis == AXIS.x) {\n        if (x >= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n          left = parseInt(0 - currElement.offsetLeft - (otherElement.offsetLeft + otherPiece.size * tileSize));\n        } else if (x <= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n          right = parseInt(boardBoundingRect.width - (w * tileSize + currElement.offsetLeft + otherPiece.size * tileSize));\n        }\n      } else if (axis == AXIS.y) {}\n    }\n  }); //console.log(\"mounted: \" + left + \" \" + top + \" \" + right + \" \" + bottom)\n\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n};\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler, isMounted) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  let height = h * SIZE_MOD;\n  let width = w * SIZE_MOD;\n  let bounds = calculateInitialBounds(id, x, y, h, w, allPieces, axis);\n  /*\n  let bounds = isMounted \n      ? calculateNewBounds(id, x, y, h, w, allPieces, axis)\n      : calculateInitialBounds(id, x, y, h, w, allPieces, axis);\n  */\n\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: axis,\n    bounds: bounds,\n    onStop: coordHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: id,\n      style: {\n        position: 'absolute',\n        left: `${xPos}%`,\n        top: `${yPos}%`,\n        height: `${height}%`,\n        width: `${width}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n  const [isMounted, setIsMounted] = useState(false);\n\n  const passNewBinToParent = () => {\n    let currElement = document.getElementById(props.pieceProps.id);\n    let boardPx = document.getElementById('main-board').getBoundingClientRect().width;\n    let vals = currElement.style.transform.match(/-?[0-9]+/gm);\n\n    if (vals.length == 1) {\n      // Only has transform in X direction\n      let xTransform = Number(vals[0]);\n      let newOffset = currElement.offsetLeft + xTransform;\n      let newBin = boardPx / newOffset;\n\n      switch (Math.trunc(newBin)) {\n        case 0:\n          newBin = 5;\n          break;\n\n        case 1:\n          newBin = 4;\n          break;\n\n        case 2:\n          newBin = 3;\n          break;\n\n        case 3:\n          newBin = 2;\n          break;\n\n        case 4:\n          newBin = 1;\n          break;\n\n        case 5:\n          newBin = 0;\n          break;\n\n        default:\n          newBin = 0;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    } else {\n      // Has transforms for both X and Y directions -- X will be 0\n      let yTransform = Number(vals[1]);\n      let newOffset = currElement.offsetTop + yTransform;\n      let newBin = boardPx / newOffset;\n\n      switch (Math.trunc(newBin)) {\n        case 0:\n          newBin = 5;\n          break;\n\n        case 1:\n          newBin = 4;\n          break;\n\n        case 2:\n          newBin = 3;\n          break;\n\n        case 3:\n          newBin = 2;\n          break;\n\n        case 4:\n          newBin = 1;\n          break;\n\n        case 5:\n          newBin = 0;\n          break;\n\n        default:\n          newBin = 0;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    }\n  };\n\n  let currPiece = props.pieceProps.orientation == 'HORIZONTAL' ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, 1, props.pieceProps.size, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent, isMounted) : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.size, 1, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent, isMounted);\n  return currPiece;\n};\n\n_s(Piece, \"8hxzkWxjzip/MIArT+k4qGkRP7U=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useEffect","useState","Draggable","BOARD_SIZE","SIZE_MOD","AXIS","x","y","calculateBoundsFromOtherPiece","parentBound","currPos","otherPos","otherSize","calculateInitialBounds","id","h","w","allPieces","axis","boardBoundingRect","document","getElementById","getBoundingClientRect","tileSize","width","left","parseInt","top","right","bottom","height","forEach","otherPiece","size","calculateNewBounds","currElement","offsetLeft","offsetTop","otherElement","preparePiece","color","coordHandler","isMounted","xPos","yPos","bounds","position","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","setIsMounted","passNewBinToParent","boardPx","vals","style","transform","match","length","xTransform","Number","newOffset","newBin","Math","trunc","onFinishedDragging","yTransform","currPiece","orientation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst AXIS = {\n    x: 'x',\n    y: 'y'\n}\n\nconst calculateBoundsFromOtherPiece = (parentBound, currPos, otherPos, otherSize) => {\n\n}\n\nconst calculateInitialBounds = (id, x, y, h, w, allPieces, axis) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n    let tileSize = boardBoundingRect.width / BOARD_SIZE;\n\n    let left = parseInt(0 - (x * tileSize));\n    let top = parseInt(0 - (y * tileSize));\n    let right = parseInt(boardBoundingRect.width - ((w + x) * tileSize));\n    let bottom = parseInt(boardBoundingRect.height - ((h + y) * tileSize));\n    \n    allPieces.forEach(otherPiece => {\n        if (id != otherPiece.id) {\n            if (axis == AXIS.x) {\n                if (x >= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n                    left = parseInt(0 - ((x - (otherPiece.x + otherPiece.size)) * tileSize))\n                } else if (x <= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n                    right = parseInt(boardBoundingRect.width - ((w + x + otherPiece.size) * tileSize))\n                }\n            } else if (axis == AXIS.y) {\n\n            }\n        }\n    })\n\n    //console.log(\"not mounted: \" + left + \" \" + top + \" \" + right + \" \" + bottom)\n\n\n    return {\n        left: left, \n        top: top, \n        right: right, \n        bottom: bottom\n    }\n}\n\nconst calculateNewBounds = (id, x, y, h, w, allPieces, axis) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n    let currElement = document.getElementById(id);\n    let tileSize = boardBoundingRect.width / BOARD_SIZE;\n\n    let left = parseInt(0 - currElement.offsetLeft);\n    let top = parseInt(0 - currElement.offsetTop);\n    let right = parseInt(boardBoundingRect.width - ((w * tileSize) + currElement.offsetLeft));\n    let bottom = parseInt(boardBoundingRect.height - ((h * tileSize) + currElement.offsetTop));\n\n    allPieces.forEach(otherPiece => {\n        if (id != otherPiece.id) {\n            let otherElement = document.getElementById(otherPiece.id)\n\n            if (axis == AXIS.x) {\n                if (x >= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n                    left = parseInt(0 - currElement.offsetLeft - (otherElement.offsetLeft + (otherPiece.size * tileSize)))\n                } else if (x <= otherPiece.x && y >= otherPiece.y && y <= otherPiece.y + otherPiece.size) {\n                    right = parseInt(boardBoundingRect.width - ((w * tileSize) + currElement.offsetLeft + (otherPiece.size * tileSize)))\n                }\n            } else if (axis == AXIS.y) {\n\n            }\n        }\n    })\n\n    //console.log(\"mounted: \" + left + \" \" + top + \" \" + right + \" \" + bottom)\n\n    return {\n        left: left, \n        top: top, \n        right: right, \n        bottom: bottom\n    }\n}\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler, isMounted) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    let bounds = calculateInitialBounds(id, x, y, h, w, allPieces, axis)\n\n    /*\n    let bounds = isMounted \n        ? calculateNewBounds(id, x, y, h, w, allPieces, axis)\n        : calculateInitialBounds(id, x, y, h, w, allPieces, axis);\n    */\n\n    return (\n        <Draggable axis={axis} bounds={bounds} onStop={coordHandler}>\n            <div id={id} style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n    const [isMounted, setIsMounted] = useState(false);\n\n    const passNewBinToParent = () => {\n        let currElement = document.getElementById(props.pieceProps.id)\n\n        let boardPx = document.getElementById('main-board').getBoundingClientRect().width\n        let vals = currElement.style.transform.match(/-?[0-9]+/gm)\n\n        if (vals.length == 1) {\n            // Only has transform in X direction\n            let xTransform = Number(vals[0])\n            let newOffset = currElement.offsetLeft + xTransform\n            let newBin = boardPx / newOffset\n\n            switch(Math.trunc(newBin)) {\n                case 0: \n                    newBin = 5\n                    break;\n                case 1:\n                    newBin = 4\n                    break;\n                case 2:\n                    newBin = 3\n                    break;\n                case 3:\n                    newBin = 2\n                    break;\n                case 4:\n                    newBin = 1\n                    break;\n                case 5:\n                    newBin = 0\n                    break;\n                default:\n                    newBin = 0\n            }\n        \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        } else {\n            // Has transforms for both X and Y directions -- X will be 0\n            let yTransform = Number(vals[1])\n            let newOffset = currElement.offsetTop + yTransform\n\n            let newBin = boardPx / newOffset\n\n            switch(Math.trunc(newBin)) {\n                case 0: \n                    newBin = 5\n                    break;\n                case 1:\n                    newBin = 4\n                    break;\n                case 2:\n                    newBin = 3\n                    break;\n                case 3:\n                    newBin = 2\n                    break;\n                case 4:\n                    newBin = 1\n                    break;\n                case 5:\n                    newBin = 0\n                    break;\n                default:\n                    newBin = 0\n            }\n            \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        }\n    }\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, 1, props.pieceProps.size, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent, isMounted)\n        : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.size, 1, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent, isMounted);\n\n    return currPiece;\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}