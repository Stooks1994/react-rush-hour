{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst calculateBounds = (id, x, y, h, w) => {\n  let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n  let left = 0 - x;\n  let top = 0 - y;\n  let right = boardBoundingRect.width - w;\n  let bottom = boardBoundingRect.height - h;\n  return {\n    left: {\n      left\n    },\n    top: {\n      top\n    },\n    right: {\n      right\n    },\n    bottom: {\n      bottom\n    }\n  };\n};\n\nconst preparePiece = (id, x, y, h, w, axis, color, coordHandler) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  let height = h * SIZE_MOD;\n  let width = w * SIZE_MOD;\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: axis,\n    bounds: calculateBounds(id, xPos, yPos, height, width),\n    onStop: coordHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: id,\n      style: {\n        position: 'absolute',\n        left: `${xPos}%`,\n        top: `${yPos}%`,\n        height: `${height}%`,\n        width: `${width}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n\n  const passNewBinToParent = () => {\n    let currElement = document.getElementById(props.pieceProps.id);\n    let boardPx = document.getElementById('main-board').getBoundingClientRect().width;\n    let vals = currElement.style.transform.match(/-?[0-9]+/gm);\n\n    if (vals.length == 1) {\n      // Only has transform in X direction\n      let xTransform = Number(vals[0]);\n      let newOffset = currElement.offsetLeft + xTransform;\n      let newBin = boardPx / newOffset;\n\n      switch (Math.trunc(newBin)) {\n        case 0:\n          newBin = 5;\n          break;\n\n        case 1:\n          newBin = 4;\n          break;\n\n        case 2:\n          newBin = 3;\n          break;\n\n        case 3:\n          newBin = 2;\n          break;\n\n        case 4:\n          newBin = 1;\n          break;\n\n        case 5:\n          newBin = 0;\n          break;\n\n        default:\n          newBin = 0;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    } else {\n      // Has transforms for both X and Y directions -- X will be 0\n      let yTransform = Number(vals[1]);\n      let newOffset = currElement.offsetTop + yTransform;\n      let newBin = boardPx / newOffset;\n\n      switch (Math.trunc(newBin)) {\n        case 0:\n          newBin = 5;\n          break;\n\n        case 1:\n          newBin = 4;\n          break;\n\n        case 2:\n          newBin = 3;\n          break;\n\n        case 3:\n          newBin = 2;\n          break;\n\n        case 4:\n          newBin = 1;\n          break;\n\n        case 5:\n          newBin = 0;\n          break;\n\n        default:\n          newBin = 0;\n      }\n\n      props.onFinishedDragging(props.pieceProps.id, newBin);\n    }\n  };\n\n  let currPiece = props.pieceProps.orientation == 'HORIZONTAL' ? preparePiece(props.pieceProps.id, currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color, passNewBinToParent) : preparePiece(props.pieceProps.id, currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color, passNewBinToParent);\n  return currPiece;\n};\n\n_s(Piece, \"/A3MDO/EzisF3q3SKiJ9PBrtAyo=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useState","Draggable","BOARD_SIZE","SIZE_MOD","calculateBounds","id","x","y","h","w","boardBoundingRect","document","getElementById","getBoundingClientRect","left","top","right","width","bottom","height","preparePiece","axis","color","coordHandler","xPos","yPos","position","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","passNewBinToParent","currElement","boardPx","vals","style","transform","match","length","xTransform","Number","newOffset","offsetLeft","newBin","Math","trunc","onFinishedDragging","yTransform","offsetTop","currPiece","orientation","size"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst calculateBounds = (id, x, y, h, w) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n\n    let left = 0 - x;\n    let top = 0 - y;\n    let right = boardBoundingRect.width - w;\n    let bottom = boardBoundingRect.height - h;\n\n    return {\n        left: {left}, \n        top: {top}, \n        right: {right}, \n        bottom: {bottom}\n    }\n}\n\nconst preparePiece = (id, x, y, h, w, axis, color, coordHandler) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    return (\n        <Draggable axis={axis} bounds={calculateBounds(id, xPos, yPos, height, width)} onStop={coordHandler}>\n            <div id={id} style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n\n    const passNewBinToParent = () => {\n        let currElement = document.getElementById(props.pieceProps.id)\n\n        let boardPx = document.getElementById('main-board').getBoundingClientRect().width\n        let vals = currElement.style.transform.match(/-?[0-9]+/gm)\n\n        if (vals.length == 1) {\n            // Only has transform in X direction\n            let xTransform = Number(vals[0])\n            let newOffset = currElement.offsetLeft + xTransform\n            let newBin = boardPx / newOffset\n\n            switch(Math.trunc(newBin)) {\n                case 0: \n                    newBin = 5\n                    break;\n                case 1:\n                    newBin = 4\n                    break;\n                case 2:\n                    newBin = 3\n                    break;\n                case 3:\n                    newBin = 2\n                    break;\n                case 4:\n                    newBin = 1\n                    break;\n                case 5:\n                    newBin = 0\n                    break;\n                default:\n                    newBin = 0\n            }\n        \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        } else {\n            // Has transforms for both X and Y directions -- X will be 0\n            let yTransform = Number(vals[1])\n            let newOffset = currElement.offsetTop + yTransform\n\n            let newBin = boardPx / newOffset\n\n            switch(Math.trunc(newBin)) {\n                case 0: \n                    newBin = 5\n                    break;\n                case 1:\n                    newBin = 4\n                    break;\n                case 2:\n                    newBin = 3\n                    break;\n                case 3:\n                    newBin = 2\n                    break;\n                case 4:\n                    newBin = 1\n                    break;\n                case 5:\n                    newBin = 0\n                    break;\n                default:\n                    newBin = 0\n            }\n            \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        }\n    }\n\n    let currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n        ? preparePiece(props.pieceProps.id, currX, currY, 1, props.pieceProps.size, 'x', props.pieceProps.color, passNewBinToParent)\n        : preparePiece(props.pieceProps.id, currX, currY, props.pieceProps.size, 1, 'y', props.pieceProps.color, passNewBinToParent);\n\n    return currPiece;\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}