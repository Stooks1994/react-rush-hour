{"ast":null,"code":"var _jsxFileName = \"/Users/ian/react/rush-hour/src/components/Piece.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, size, orientation, color) => {\n  let xPos = x * SIZE_MOD;\n  let yPos = y * SIZE_MOD;\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: orientation,\n    bounds: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: `${x}%`,\n        top: `${y}%`,\n        height: `${h}%`,\n        width: `${w}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\nconst Piece = props => {\n  _s();\n\n  const [currX, setCurrX] = useState(props.pieceProps.x);\n  const [currY, setCurrY] = useState(props.pieceProps.y);\n  let x = currX * SIZE_MOD;\n  let y = currY * SIZE_MOD;\n  let color = props.pieceProps.color;\n\n  if (props.pieceProps.orientation == 'HORIZONTAL') {\n    let w = props.pieceProps.size * SIZE_MOD;\n    let h = 1 * SIZE_MOD;\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      axis: \"x\",\n      bounds: \"parent\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: `${x}%`,\n          top: `${y}%`,\n          height: `${h}%`,\n          width: `${w}%`,\n          backgroundColor: `${color}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n  let h = Number(props.pieceProps.size * SIZE_MOD);\n  let w = Number(1 * SIZE_MOD);\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    axis: \"y\",\n    bounds: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: `${x}%`,\n        top: `${y}%`,\n        height: `${h}%`,\n        width: `${w}%`,\n        backgroundColor: `${color}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Piece, \"/A3MDO/EzisF3q3SKiJ9PBrtAyo=\");\n\n_c = Piece;\nexport default Piece;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"sources":["/Users/ian/react/rush-hour/src/components/Piece.js"],"names":["React","useState","Draggable","BOARD_SIZE","SIZE_MOD","preparePiece","x","y","size","orientation","color","xPos","yPos","position","left","top","height","h","width","w","backgroundColor","Piece","props","currX","setCurrX","pieceProps","currY","setCurrY","Number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst preparePiece = (x, y, size, orientation, color) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n\n    return (\n        <Draggable axis={orientation} bounds='parent'>\n            <div style={{\n                position:'absolute', \n                left:`${x}%`, \n                top:`${y}%`, \n                height:`${h}%`, \n                width:`${w}%`, \n                backgroundColor:`${color}`,\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const [currX, setCurrX] = useState(props.pieceProps.x);\n    const [currY, setCurrY] = useState(props.pieceProps.y);\n\n    let x = currX * SIZE_MOD;\n    let y = currY * SIZE_MOD;\n    let color = props.pieceProps.color;\n\n    if (props.pieceProps.orientation == 'HORIZONTAL') {\n        let w = props.pieceProps.size * SIZE_MOD;\n        let h = 1 * SIZE_MOD;\n\n        return (\n            <Draggable axis='x' bounds='parent'>\n                <div style={{\n                    position:'absolute', \n                    left:`${x}%`, \n                    top:`${y}%`, \n                    height:`${h}%`, \n                    width:`${w}%`, \n                    backgroundColor:`${color}`,\n                }} />\n            </Draggable>\n        )\n    }\n\n    let h = Number(props.pieceProps.size * SIZE_MOD);\n    let w = Number(1 * SIZE_MOD);\n\n    return (\n        <Draggable axis='y' bounds='parent'>\n            <div style={{\n                position:'absolute', \n                left:`${x}%`, \n                top:`${y}%`, \n                height:`${h}%`, \n                width:`${w}%`, \n                backgroundColor:`${color}`,\n            }} />     \n        </Draggable>\n    )\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}