{"version":3,"sources":["components/Piece.js","components/Board.js","components/Controls.js","components/Info.js","components/NavBar.js","components/Game.js","components/Instructions.js","components/MainContainer.js","App.js","index.js"],"names":["SIZE_MOD","AXIS","preparePiece","id","x","y","h","w","allPieces","axis","color","coordHandler","xPos","yPos","height","width","bounds","boardBoundingRect","document","getElementById","getBoundingClientRect","tileSize","left","parseInt","top","right","bottom","forEach","otherPiece","potentialBound","calculateBounds","onStop","position","style","backgroundColor","borderRadius","Piece","props","passNewBinToParent","currElement","pieceProps","boardPx","vals","transform","match","xTransform","Number","newOffset","offsetLeft","newBin","onFinishedDragging","length","yTransform","offsetTop","orientation","Board","useState","isMounted","setIsMounted","currPuzzle","pieces","piecesOnBoard","setPiecesOnBoard","escapeSpace","filter","piece","escapingPiece","useEffect","puzzlePieces","updatePiecesOnBoard","prevState","newState","slice","element","alert","isGameStarted","className","map","Controls","onClick","onGetNewPuzzle","onResetPuzzle","Info","href","target","NavBar","navSelection","setNavSelection","selectedStyle","unselectedStyle","onContentSelection","selection","setContentSelection","getRandomColorCode","green","Math","floor","random","toString","blue","setRandomColorCodesForPieces","puzzle","index","Game","setPuzzle","basePuzzle","setBasePuzzle","selectedDifficulty","gameStarted","setGameStarted","prepFallBack","fallback","axios","get","then","res","data","JSON","parse","stringify","catch","err","console","log","Instructions","MainContainer","contentSelection","mainSectionContent","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.aa1da2ab.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Draggable from 'react-draggable';\n\nconst BOARD_SIZE = 6;\nconst SIZE_MOD = 100 / BOARD_SIZE;\n\nconst AXIS = {\n    x: 'x',\n    y: 'y'\n}\n\nconst calculateBounds = (id, x, y, h, w, allPieces, axis) => {\n    let boardBoundingRect = document.getElementById('main-board').getBoundingClientRect();\n    let tileSize = boardBoundingRect.width / BOARD_SIZE;\n\n    let left = parseInt(0 - (x * tileSize));\n    let top = parseInt(0 - (y * tileSize));\n    let right = parseInt(boardBoundingRect.width - ((w + x) * tileSize));\n    let bottom = parseInt(boardBoundingRect.height - ((h + y) * tileSize));\n    \n    allPieces.forEach(otherPiece => {\n        if (id != otherPiece.id) {\n            if (axis == AXIS.x) {\n                if (x >= otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    let potentialBound = parseInt(0 - ((x - (otherPiece.x + otherPiece.w)) * tileSize))\n                    if (potentialBound > left) left = potentialBound\n                } else if (x < otherPiece.x && y >= otherPiece.y && y < otherPiece.y + otherPiece.h) {\n                    let potentialBound = parseInt((otherPiece.x * tileSize) - ((x + w) * tileSize))\n                    if (potentialBound < right) right = potentialBound\n                }\n            } else if (axis == AXIS.y) {\n                if (y >= otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    let potentialBound = parseInt(0 - ((y - (otherPiece.y + otherPiece.h)) * tileSize))\n                    if (potentialBound > top) top = potentialBound\n                } else if (y < otherPiece.y && x >= otherPiece.x && x < otherPiece.x + otherPiece.w) {\n                    let potentialBound = parseInt((otherPiece.y * tileSize) - ((y + h) * tileSize))\n                    if (potentialBound < bottom) bottom = potentialBound\n                }\n            }\n        }\n    })\n\n    return {\n        left: left, \n        top: top, \n        right: right, \n        bottom: bottom\n    }\n}\n\nconst preparePiece = (id, x, y, h, w, allPieces, axis, color, coordHandler) => {\n    let xPos = x * SIZE_MOD;\n    let yPos = y * SIZE_MOD;\n    let height = h * SIZE_MOD;\n    let width = w * SIZE_MOD;\n\n    let bounds = calculateBounds(id, x, y, h, w, allPieces, axis)\n\n    return (\n        <Draggable axis={axis} bounds={bounds} onStop={coordHandler} position={{x:0, y:0}}>\n            <div id={id} style={{\n                position:'absolute', \n                left:`${xPos}%`, \n                top:`${yPos}%`, \n                height:`${height}%`, \n                width:`${width}%`, \n                backgroundColor:`${color}`,\n                borderRadius:'5px',\n            }} />\n        </Draggable>\n    )\n}\n\nconst Piece = props => {\n    const passNewBinToParent = () => {\n        let currElement = document.getElementById(props.pieceProps.id)\n\n        let boardPx = document.getElementById('main-board').getBoundingClientRect().width\n        let vals = currElement.style.transform.match(/-?[0-9]+/gm)\n        let tileSize = boardPx / BOARD_SIZE;\n\n        if (vals[0] != \"0\") {\n            let xTransform = Number(vals[0])\n            let newOffset = currElement.offsetLeft + xTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n\n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        } else if (vals.length == 2 && vals[1] != \"0\") {\n            let yTransform = Number(vals[1])\n            let newOffset = currElement.offsetTop + yTransform\n            let newBin = 0\n\n            if (newOffset <= 0.5 * tileSize) {\n                newBin = 0;\n            } else if (newOffset <= 1.5 * tileSize && newOffset > 0.5 * tileSize) {\n                newBin = 1;\n            } else if (newOffset <= 2.5 * tileSize && newOffset > 1.5 * tileSize) {\n                newBin = 2;\n            } else if (newOffset <= 3.5 * tileSize && newOffset > 2.5 * tileSize) {\n                newBin = 3;\n            } else if (newOffset <= 4.5 * tileSize && newOffset > 3.5 * tileSize) {\n                newBin = 4;\n            } else {\n                newBin = 5;\n            }\n            \n            props.onFinishedDragging(props.pieceProps.id, newBin)\n        }\n    }\n\n    var currPiece;\n\n    if (props.pieceProps.w == 1 && props.pieceProps.h == 1) \n        currPiece = preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'none', props.pieceProps.color, passNewBinToParent)\n    else\n        currPiece = props.pieceProps.orientation == 'HORIZONTAL' \n            ? preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'x', props.pieceProps.color, passNewBinToParent)\n            : preparePiece(props.pieceProps.id, props.pieceProps.x, props.pieceProps.y, props.pieceProps.h, props.pieceProps.w, props.allPieces, 'y', props.pieceProps.color, passNewBinToParent);\n\n    return currPiece;\n}\n\nexport default Piece;","import React, { useState, useEffect } from \"react\"\nimport Piece from \"./Piece\";\nimport '../styling/Board.css'\n\nconst getEscapeSpace = pieces => {\n    let escapePiece = pieces.filter(piece => piece.escapingPiece)\n    return escapePiece[0]\n}\n\nconst Board = props => {\n    const [isMounted, setIsMounted] = useState(false);\n    const [piecesOnBoard, setPiecesOnBoard] = useState(props.currPuzzle.pieces);\n    const escapeSpace = getEscapeSpace(props.currPuzzle.pieces);\n\n    useEffect(() => {\n        setPiecesOnBoard(props.currPuzzle.pieces);\n    },[props.currPuzzle.pieces])\n\n    const populateBoardFromPuzzle = puzzlePieces => {\n        return puzzlePieces.map(piece => (\n            <Piece \n                key={piece.id} \n                pieceProps={piece} \n                allPieces={puzzlePieces} \n                onFinishedDragging={updatePiecesOnBoard} \n            />)\n        )\n    }\n\n    const updatePiecesOnBoard = (id, newBin) => {\n        setPiecesOnBoard((prevState) => {\n            let newState = prevState.slice();\n\n            newState.forEach(element => {\n                if (element.id === id) {\n                    if (element.orientation == 'HORIZONTAL') {\n                        element.x = newBin;\n                    } else if (element.orientation == 'VERTICAL') {\n                        element.y = newBin;\n                    }\n                }\n            })\n\n            return newState;\n        })\n\n        if (id == escapeSpace.id && newBin + escapeSpace.w > 5) {\n            alert('you win')\n        }\n    }\n    \n    useEffect(() => {setIsMounted(true)})\n\n    if (props.isGameStarted) {\n        return (\n            <div id='main-board' className='board'>\n                {isMounted && populateBoardFromPuzzle(piecesOnBoard)}\n            </div>\n        )\n    } else {\n        return (\n            <div id='main-board' className='empty-board'>\n                <div>Click the New Puzzle button to get started</div>\n            </div>  \n        )\n    }\n}\n\nexport default Board","import Timer from './Timer'\nimport '../styling/Controls.css'\n\nconst Controls = props => {\n\n    const getNewPuzzle = () => {\n        props.onGetNewPuzzle();\n    }\n\n    const resetPuzzle = () => {\n        props.onResetPuzzle();\n    }\n\n    return (\n        <div className='controls'>\n            <button className='controls-button' onClick={getNewPuzzle}>New Puzzle</button>\n            <button className='controls-button' onClick={resetPuzzle}>Reset</button>\n        </div>\n    )\n}\n\nexport default Controls;","import '../styling/Info.css'\n\nconst Info = props => {\n    const infoString = `A clone of the board game, Rush Hour, made using React.js and Go`;\n    \n    return (\n        <div className='info-container'>\n            <div className='info'>\n                <div className='info-row'><h1>RUSH HOUR</h1></div>\n                <div className='info-row'>{infoString}</div>\n                <div className='info-row'>\n                    <a href=\"https://github.com/ian-anderson94/react-rush-hour\" target=\"_blank\">View Code</a>\n                    <a href=\"https://www.michaelfogleman.com/rush/\" target=\"_blank\">Puzzles sourced from Michael Fogleman</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Info","import React, { useState } from \"react\"\nimport '../styling/NavBar.css'\n\nconst NavBar = props => {\n    const [navSelection, setNavSelection] = useState(\"game\")\n\n    const selectedStyle = {\n        backgroundColor: '#ffe6c4',\n    }\n\n    const unselectedStyle = {\n        backgroundColor: 'Transparent'\n    }\n\n    function onContentSelection(selection) {\n        setNavSelection(selection)\n        props.setContentSelection(selection)\n    }\n\n    return (\n        <div className='nav-bar'>\n            <button \n                className='nav-bar-item' \n                onClick={() => onContentSelection(\"game\")} \n                style={navSelection == \"game\" ? selectedStyle : unselectedStyle}\n            >\n                Game\n            </button>\n            <button \n                className='nav-bar-item' \n                onClick={() => onContentSelection(\"about\")}\n                style={navSelection == \"about\" ? selectedStyle : unselectedStyle}\n            >\n                About\n            </button>\n            <button \n                className='nav-bar-item' \n                onClick={() => onContentSelection(\"instructions\")}\n                style={navSelection == \"instructions\" ? selectedStyle : unselectedStyle}\n                >\n                Instructions\n            </button>\n        </div>\n    )\n}\n\nexport default NavBar","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Board from './Board'\nimport Controls from './Controls'\nimport Info from './Info'\nimport NavBar from './NavBar'\nimport Navigation from './Navigation'\nimport '../styling/Game.css'\n\nconst getRandomColorCode = escapingPiece => {\n    if (escapingPiece) {\n        return \"#FF0000\"\n    }\n\n    var red = \"00\";\n    var green = (Math.floor(Math.random() * 255)).toString(16);\n    var blue = (Math.floor(Math.random() * 255)).toString(16);\n\n    if (green.length == 1)\n        green = \"0\" + green;\n        \n    if (blue.length == 1)\n        blue = \"0\" + blue;\n\n    return `#${red}${green}${blue}`;\n}\n\nconst setRandomColorCodesForPieces = puzzle => {\n    for (var index = 0; index < puzzle.pieces.length; index++) {\n        puzzle.pieces[index].color = getRandomColorCode(puzzle.pieces[index].escapingPiece);\n    }\n}\n\nconst Game = () => {\n    const [puzzle, setPuzzle] = useState({pieces: []})\n    const [basePuzzle, setBasePuzzle] = useState({pieces: []})\n    const [selectedDifficulty, setSelectedDifficulty] = useState(\"easy\");\n    const [gameStarted, setGameStarted] = useState(false);\n\n    const prepFallBack = () => {\n        let fallback = {\n            pieces: [\n                {id:0, x:0, y:2, h:1, w:2, orientation:'HORIZONTAL', color:'red', escapingPiece:true},\n                {id:1, x:2, y:0, h:3, w:1, orientation:'VERTICAL', color:'blue', escapingPiece:false},\n                {id:2, x:0, y:3, h:1, w:3, orientation:'HORIZONTAL', color:'green', escapingPiece:false},\n                {id:3, x:5, y:3, h:3, w:1, orientation:'VERTICAL', color:'teal', escapingPiece:false},\n            ]\n        }\n    \n        setRandomColorCodesForPieces(fallback)\n        setPuzzle(fallback)\n        setBasePuzzle(fallback)\n    }\n\n    const setDifficulty = difficulty => {\n        setSelectedDifficulty(difficulty);\n    }\n\n    const getNewPuzzle = () => {\n        switch (selectedDifficulty) {\n            case \"easy\":\n                axios.get(`http://localhost:8081/api/getEasyPuzzle`)\n                //axios.get(`/api/getEasyPuzzle`)\n                .then(res => {\n                    setRandomColorCodesForPieces(res.data);\n                    setPuzzle(res.data)\n                    setBasePuzzle(JSON.parse(JSON.stringify(res.data)))\n                })\n                .catch(err => {\n                    console.log(err);\n                    prepFallBack();\n                })\n                break;\n            case \"medium\":\n                axios.get(`http://localhost:8081/api/getMediumPuzzle`)\n                //axios.get(`/api/getMediumPuzzle`)\n                .then(res => {\n                    setRandomColorCodesForPieces(res.data);\n                    setPuzzle(res.data)\n                    setBasePuzzle(JSON.parse(JSON.stringify(res.data)))\n                })\n                .catch(err => {\n                    console.log(err);\n                    prepFallBack();\n                })\n                break;\n            case \"hard\":\n                axios.get(`http://localhost:8081/api/getHardPuzzle`)\n                //axios.get(`/api/getHardPuzzle`)\n                .then(res => {\n                    setRandomColorCodesForPieces(res.data);\n                    setPuzzle(res.data)\n                    setBasePuzzle(JSON.parse(JSON.stringify(res.data)))\n                })\n                .catch(err => {\n                    console.log(err);\n                    prepFallBack();\n                })\n                break;\n        }\n\n        setGameStarted(true);\n    }\n\n    const resetPuzzle = () => {\n        setPuzzle(JSON.parse(JSON.stringify(basePuzzle)));\n    }\n\n    return (\n        <div className='game'>\n            <Controls \n                onGetNewPuzzle={getNewPuzzle}\n                onResetPuzzle={resetPuzzle}\n            />\n            <Board \n                currPuzzle={puzzle} \n                isGameStarted={gameStarted} \n            />\n        </div>\n    )\n}\n\nexport default Game","import '../styling/Instructions.css'\n\nconst Instructions = () => {\n    const infoString = `Get the red block to the end of its row\\n   - Pieces move along a single axis\\n   - 1x1 blocks are stationary`;\n\n    return (\n        <div className='instr-container'>\n            <div className='instr'>\n                <div className='instr-row'><h1>INSTRUCTIONS</h1></div>\n                <div className='instr-row'>{infoString}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Instructions","import React, { useState } from 'react'\n\nimport Game from \"./Game\"\nimport Info from './Info'\nimport NavBar from \"./NavBar\"\nimport Instructions from './Instructions'\nimport '../styling/MainContainer.css'\n\nconst MainContainer = () => {\n    const [contentSelection, setContentSelection] = useState(\"game\");\n\n    function contentSelectionHandler(selection) {\n        setContentSelection(selection)\n    }\n\n    let mainSectionContent = <Game />\n\n    switch (contentSelection) {\n        case \"about\":\n            mainSectionContent = <Info />\n            break\n        case \"game\":\n            mainSectionContent = <Game />\n            break\n        case \"instructions\":\n            mainSectionContent = <Instructions />\n    }\n\n    return (\n        <div className='main-container'>\n            <NavBar \n                setContentSelection={contentSelectionHandler}\n            />\n            {mainSectionContent}\n        </div>\n    )\n}\n\nexport default MainContainer","import React, { useState } from 'react'\n\nimport MainContainer from './components/MainContainer'\nimport './styling/App.css'\n\nfunction App() {\n\n    return (\n        <MainContainer />\n    );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}